<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web之Http基础</title>
      <link href="/2023/08/25/Http%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/25/Http%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP基础"><a href="#HTTP基础" class="headerlink" title="HTTP基础"></a>HTTP基础</h1><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议。</p><p>打开浏览器，随便访问一个网站，按F12打开开发者工具，点击<strong>网络&#x2F;Network</strong>,再次刷新网页，就可以看到你向这个网站服务器发送的HTTP请求数据包了。</p><p><img src="/http/image.png" alt="Alt text"></p><h2 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h2><p>HTTP请求包包含三个部分：请求行、请求头、请求体</p><h3 id="HTTP请求行"><a href="#HTTP请求行" class="headerlink" title="HTTP请求行"></a>HTTP请求行</h3><ul><li>请求行的内容<ul><li>方法类型</li><li>资源路径+查询参数</li><li>协议版本</li></ul></li></ul><p>直观地分析一个请求行<br><code>GET https://somewebsite.com/index.php?id=1 HTTP/1.1</code></p><ul><li>GET 是请求方式中的一种</li><li><a href="https://somewebsite.com/index.php?id=1">https://somewebsite.com/index.php?id=1</a> 是URL，既资源路径+查询参数</li><li>HTTP&#x2F;1.1 协议版本</li></ul><blockquote><p><strong>请求方式</strong><br>只要有GET和POST两种方式，两者最直观的区别在于<strong>数据参数的位置</strong></p><ul><li>GET<br>数据参数往往直接写在URL的尾部，比如访问<code>https://somewebsite.com/index.php?usr=1&amp;pwd=1</code>时,就向目标网站传递了参数usr&#x3D;1和pwd&#x3D;1。</li><li>POST<br>数据参数往往写在请求体中</li></ul></blockquote><blockquote><p>GET和POST的使用用途也往往不同，GET往往用来申请访问相关网页资源，POST往往用于向指定资源提交数据进行处理请求（例如提交表单或者上传文件）</p></blockquote><h3 id="HTTP请求头"><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h3><p>有一些常见的字段</p><ul><li>Host: 主机域名</li><li>User-Agent: 客户端相关信息</li><li>Accept：客户端想要的响应数据类型</li><li>Content-Type： 客户端告诉服务器实际发送的数据类型</li><li>X-Forwarded-For： 表示 HTTP 请求端真实 IP</li><li>Cookie: 某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据</li><li>Referer: 用于告知服务器用户的来源页面</li></ul><h3 id="HTTP请求体"><a href="#HTTP请求体" class="headerlink" title="HTTP请求体"></a>HTTP请求体</h3><p>客户端传给服务器的其他任意数据，POST方法下表单数据在此处<br>（使用GET方法的HTTP请求往往没有请求体）</p><h2 id="HTTP响应包"><a href="#HTTP响应包" class="headerlink" title="HTTP响应包"></a>HTTP响应包</h2><p>和请求包类似，由三个部分组成：响应行，响应头，响应体</p><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>由协议版本，状态码，状态消息组成，比如<br><code>HTTP/1.1 200 OK</code></p><ul><li><p>协议版本  HTTP&#x2F;版本号</p></li><li><p>状态码:   XXX</p><ul><li>1xx 表示【临时响应】并需要请求者继续执行操作的状态代码</li><li>2xx 表示【成功】处理了请求的状态代码</li><li>3xx 表示要完成请求，需要进一步操作。通常，这些状态代码用来【重定向】</li><li>4xx 表示客户端错误–处理发生错误，责任在客户端</li><li>5xx 表示【服务器】在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</li></ul><p>常见状态码</p><ul><li>200 客户端请求成功，即处理成功</li><li>302 只是所请求的资源已移动到由Location响应头给定的URL，浏览器会自动重新访问到这个页面</li><li>404 请求资源不存在，一般是URL输入有误，或者网站资源被删除了</li></ul></li><li><p>状态消息 描述状态码</p></li></ul><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>告知客户端的信息</p><ul><li>Date</li><li>Content-type</li></ul><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>服务器给客户端的数据内容，如HTML文件等。</p><h2 id="发送自定义HTTP请求"><a href="#发送自定义HTTP请求" class="headerlink" title="发送自定义HTTP请求"></a>发送自定义HTTP请求</h2><p>我们可以通过一些工具来发送自定义的HTTP请求</p><p>有些网站有配置防止爬虫爬取的技术，所以发送HTTP请求最好要设置HTTP请求头中的User-Agent等字段，让我们发送的请求“看上去”像是浏览器发送的。</p><h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><p>Windows和Linux命令行下都能用，是访问URL的计算机逻辑语言的工具。</p><ol><li><p>向目标网址发送请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com </span><br></pre></td></tr></table></figure></li><li><p>用指定方式发送请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -X GET</span><br><span class="line">curl http://target.com -X POST -d <span class="string">&quot;id=1&quot;</span></span><br></pre></td></tr></table></figure><p>当使用参数 -d，-X POST 可以省略，因为会隐式发起 POST 请求。</p></li><li><p>设置HTTP请求头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -H <span class="string">&quot;User-Agent:MyBrowser&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>设置表单数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -F <span class="string">&quot;username=admin&quot;</span> -F <span class="string">&quot;password=123456&quot;</span></span><br><span class="line">curl http://target.com -F <span class="string">&quot;file=@/path/to/file&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>设置cookie</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -b <span class="string">&quot;character=admin&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="HackBar浏览器插件"><a href="#HackBar浏览器插件" class="headerlink" title="HackBar浏览器插件"></a>HackBar浏览器插件</h3><p>下载名为HackBar的浏览器插件后，可以按F12在开发者工具中打开<br><img src="/http/image-1.png" alt="Alt text"><br>图形化界面使得自定义http请求很容易，最后点左上角EXECUTE发送</p><h3 id="Python的requests库"><a href="#Python的requests库" class="headerlink" title="Python的requests库"></a>Python的requests库</h3><p>可以写Python脚本来实现http数据包的发送</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&#x27;http://target.com&#x27;</span></span><br><span class="line"><span class="comment"># 参数、表单、文件头、cookie都以字典的形式作为函数参数</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;MyBrowser&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;Cookie&#x27;: &#x27;character=admin&#x27; #cookie可以在这里自定义</span></span><br><span class="line">&#125;</span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&#x27;character&#x27;</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># requests.get、requests.post方法分别用GET方法和POST方法发送http请求,返回response类</span></span><br><span class="line">response1 = requests.get(URL, params=param, headers=header, cookies=cookie)</span><br><span class="line">repsonse2 = requests.post(URL, data=data, headers=header,cookies=cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment"># response类的常用属性有response.status_code（网站返回的状态码）,response.text（网站返回的响应体)</span></span><br><span class="line"><span class="built_in">print</span>(response1.text)</span><br><span class="line"><span class="built_in">print</span>(response2.text)</span><br></pre></td></tr></table></figure><h3 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h3><p>Burp Suite是一款强大的网络渗透工具，可以通过代理http请求包，修改相关字段，实现自定义数据包，可以自行搜索相关教程</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>现在有了上述基础知识，可以来点例题练练手</p><h3 id="攻防世界-Web-get-post"><a href="#攻防世界-Web-get-post" class="headerlink" title="攻防世界 Web get_post"></a>攻防世界 Web get_post</h3><p><img src="/http/image-2.png" alt="Alt text"></p><p>要求1： 请用GET方式提交一个名为a,值为1的变量<br>要求2： 请再以POST方式随便提交一个名为b,值为2的变量</p><p>用HackBar插件可以轻松秒杀<br><img src="/http/image-6.png" alt="Alt text"><br>EXECUTE后可得到flag</p><h3 id="攻防世界-Web-cookie"><a href="#攻防世界-Web-cookie" class="headerlink" title="攻防世界 Web cookie"></a>攻防世界 Web cookie</h3><p>题目描述：你知道什么是cookie吗？</p><p>打开开发者工具，查看cookie<br><img src="/http/image-4.png" alt="Alt text"><br>访问目录下的cookie.php试试<br>出现提示See the http response<br><img src="/http/image-5.png" alt="Alt text"><br>发现flag</p><h3 id="2023MoeCTF-Web-http"><a href="#2023MoeCTF-Web-http" class="headerlink" title="2023MoeCTF Web http"></a>2023MoeCTF Web http</h3><p>题目描述：用GET方法，完成五个任务</p><ol><li>use parameter: UwU&#x3D;u</li><li>post <strong>form</strong>: Luv&#x3D;u</li><li>use admin character</li><li>request from 127.0.0.1</li><li>use browser ‘MoeBrowser’</li></ol><p>关于这题我有写一篇详细的writeup<a href="#">我的writeup</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/16/hello-world/"/>
      <url>/2023/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/images/config.png" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
