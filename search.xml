<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL之索引</title>
      <link href="/2024/08/24/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
      <url>/2024/08/24/MySQL%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h2><p>索引（Index）是MySQL<strong>高效</strong>获取数据的数据结构</p><p>优点：</p><ul><li>提高数据检索的效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>劣势：</p><ul><li>索引列要占空间</li><li>降低更新表的速度</li></ul><h2 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h2><p>MySQL索引由存储引擎实现，不同存储引擎有不同结构：</p><ul><li>B+Tree 最常见</li><li>Hash</li><li>R-Tree</li><li>Full-text</li></ul><p><img src="/./pics/image-20240824145049683.png" alt="image-20240824145049683"></p><blockquote><p>数据结构补充：</p><p>搜索二叉树：任意节点都满足: 左子树最大值 &lt; 根节点值 &lt; 右子树最大值</p><p>红黑树： 平衡的搜索二叉树</p><p>B-Tree(多路平衡查找树): 一个节点最多可以存储4个key5个指针；每个指针指向的子树的值均在该指针相邻的key值表示的区间</p></blockquote><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h3><ul><li>所有元素会出现在叶子节点</li><li>根元素会出现在右节点第一个</li><li>MySQL中对经典B+Tree基础上，在叶子节点增加了指向相邻叶子节点的指针</li></ul><blockquote><ul><li>相对二叉树，层级更少，搜索效率高</li><li>相对于B-Tree，要保存叶子节点和非叶子节点，导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li></ul></blockquote><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>用hash算法将键值换算城信hash值，映射在对应槽位上，再存储在hash表中</p><ul><li>只能用于对等比较，不支持范围查询</li><li>无法利用索引完成排序操作</li><li>查询效率高</li></ul><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p><img src="/./pics/image-20240824152438057.png" alt="image-20240824152438057"></p><p>InnoDB中，索引又可以分为<strong>聚集索引</strong>和<strong>二级索引</strong></p><p><img src="/./pics/image-20240824152630129.png" alt="image-20240824152630129"></p><p>聚集索引选取规则：</p><ul><li>存在主键，主键索引就是聚集索引</li><li>不存在主键，将使用第一个唯一索引作为聚集索引</li><li>都没有，InnoDB会自动生成一个rowid作为隐藏的聚集索引</li></ul><blockquote><p>回表查询：先从二级索引中拿到行id，再用id从聚集索引找到该行的记录</p></blockquote><h2 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT] INDEX index_name <span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure><blockquote><p>一个索引只关联一个字段：单列索引</p><p>一个索引只关联多个字段：联合索引&#x2F;组合索引</p></blockquote><h3 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h3><p>查询现有索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> index <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> index index_name <span class="keyword">on</span> table_name;</span><br></pre></td></tr></table></figure><h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><h3 id="SQL执行频率"><a href="#SQL执行频率" class="headerlink" title="SQL执行频率"></a>SQL执行频率</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> &#123;<span class="keyword">global</span><span class="operator">|</span>session&#125; status <span class="keyword">like</span> <span class="string">&#x27;Com_______&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志会保存执行时间超过某一阈值的SQL语句。</p><p>查看慢日志开启状态</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br></pre></td></tr></table></figure><p>开启慢查询日志:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># /etc/my.cnf</span><br><span class="line"></span><br><span class="line">slow_query_log=<span class="number">1</span></span><br><span class="line"># 超时阈值（秒）</span><br><span class="line">long_query_time=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>慢查询日志位置：<code>/var/lib/mysql/localhost-slow.log</code></p><h3 id="Profile详情"><a href="#Profile详情" class="headerlink" title="Profile详情"></a>Profile详情</h3><p>profiles能在做SQL优化是帮助我们了解时间耗费的分布情况。</p><p>查询是否支持profiles</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> @<span class="variable">@have</span>_profiling;</span><br></pre></td></tr></table></figure><p>查询是否开启profiles</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> @<span class="variable">@profiling</span>;</span><br></pre></td></tr></table></figure><p>开启profiles</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> profiling<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>查询当前会话SQL的耗时情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定query_id的SQL语句耗时情况</span></span><br><span class="line"><span class="keyword">show</span> profile <span class="keyword">for</span> query query_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ...的CPU使用情况</span></span><br><span class="line"><span class="keyword">show</span> profile cpu <span class="keyword">for</span> query query_id</span><br></pre></td></tr></table></figure><h3 id="explain执行计划"><a href="#explain执行计划" class="headerlink" title="explain执行计划"></a>explain执行计划</h3><p>用<code>explain/desc</code>命令获取MySQL如何执行SELECT语句的信息</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;explain<span class="operator">|</span><span class="keyword">desc</span>&#125; <span class="keyword">SQL</span>查询语句</span><br></pre></td></tr></table></figure><p>各字段含义：</p><ul><li>id<ul><li>表示查询中执行select子句的顺序（越大先执行，相同则从上到下执行）</li></ul></li><li>select_type<ul><li>SIMPLE</li><li>PRIMARY 外层查询</li><li>UNION</li><li>SUBQUERY 子查询</li></ul></li><li>type (由好到坏)<ul><li>NULL 不访问任何表的查询</li><li>system 访问系统表</li><li>const 查询常量表或表只有一行数据</li><li>eq_ref 使用唯一索引</li><li>ref 使用非唯一索引</li><li>range 使用索引的一部分查询</li><li>index 全索引查询</li><li>all 全表查询</li></ul></li><li>possible_key<ul><li>可能应用这张表的索引</li></ul></li><li>Key<ul><li>实际用到的索引</li></ul></li><li>Key_len<ul><li>表示索引中引用的字节数</li></ul></li><li>rows<ul><li>MySQL认为必须要执行查询的行数</li></ul></li><li>filtered<ul><li>返回结果的函数占需读取的行数的百分比</li></ul></li></ul><h2 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h2><ul><li>最左前缀法则（<strong>联合索引</strong>）<ul><li>从索引的最左列开始，并且不跳过索引中的列（如果跳跃某一列，后面的索引会失效）</li></ul></li><li>范围查询<ul><li>联合索引中，出现范围查询（<code>&lt;</code>, <code>&gt;</code>）会使右侧的列索引失效</li><li>可以使用<code>&gt;=</code>或<code>&lt;=</code>解决</li></ul></li><li>索引列运算<ul><li>在索引列上进行运算操作，索引将失效</li></ul></li><li>字符串不加引号<ul><li>字符串不加引号（导致隐式转换）也会导致索引失效</li></ul></li><li>模糊查询<ul><li>头部模糊匹配会导致索引失效</li></ul></li><li>or连接的条件<ul><li>如果or之前有用到索引，后面没有用到索引，会导致索引失败</li><li>给原本没有索引的字段创建索引就解决。</li></ul></li><li>数据分布影响<ul><li>如果使用索引比全表搜索还慢，则不会使用索引</li></ul></li><li>SQL提示<ul><li>use index(index_name) 建议</li><li>ignore index(index_name) 忽略</li><li>force index(index_name) 强制 </li><li>在from子句之后使用</li></ul></li><li>覆盖索引<ul><li>指查询使用索引，且返回的列在该索引中都能找到</li><li>不推荐用<code>select *</code></li></ul></li></ul><blockquote><p>extra信息：</p><ul><li>using index condition: 查找使用了索引，但是需要回表查询</li><li>using where, using index: 直接从索引返回结果</li></ul></blockquote><ul><li>前缀索引<ul><li>可以用字符串的一部分前缀建立索引，可以大大节约索引空间，提高索引效率</li><li><code>create index index_name on table_name(column(n))</code>, 前缀长度为n</li></ul></li><li>单列索引与联合索引<ul><li>业务场景中，如果涉及多个字段的查询，则建议使用联合索引</li><li>可以通过SQL提示来指定查询时使用联合索引</li></ul></li></ul><h2 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h2><ol><li>数据量较大（&gt;&#x3D; 一百万条），查询频繁</li><li>针对常作为where, order by, group by操作的字段建立索引</li><li>尽量选择区分度高的列作为索引</li><li>对于长字符串字段建立索引，建议使用前缀索引</li><li>尽量使用联合索引，可以覆盖索引</li><li>控制索引数量，索引越多，维护索引的代价也越大，影响增删改的效率</li><li>建表时使用NOT NULL可以让优化器更好的确定哪个索引最有效地用于查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之存储引擎</title>
      <link href="/2024/08/24/MySQL%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2024/08/24/MySQL%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><ul><li>连接层<ul><li>处理客户端连接；认证与授权</li></ul></li><li>服务层<ul><li>SQL接口</li><li>解析器</li><li>查询优化器</li><li>缓存</li></ul></li><li>引擎层<ul><li>可插拔的存储引擎</li></ul></li><li>存储层<ul><li>Redo</li><li>Undo</li><li>Data</li><li>Index</li><li>Binary</li><li>Error等</li></ul></li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>存储引擎是存储数据，建立索引，更新&#x2F;查询数据等技术的实现方式。</p><p>存储引擎基于表，而不是库，所以存储引擎也被称为表类型的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 展示当前数据库支持的存储引擎</span></span><br><span class="line"><span class="keyword">show</span> engines;</span><br></pre></td></tr></table></figure><p>在建表语句末尾可加上<code>engine=xxx</code>来使用指定的存储引擎</p><h2 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h2><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><ul><li>DML遵循ACID，支持<strong>事务</strong></li><li><strong>行级锁</strong></li><li>支持<strong>外键</strong></li><li>每个表对应一个xxx.ibd文件，用<code>innodb_file_per_table</code>控制，默认为<code>ON</code></li></ul><p>可以用<code>ibd2sdi</code>工具来从ibd文件提取出sdi表结构数据</p><p>逻辑存储结构</p><ul><li>TableSpace</li><li>Segment</li><li>Extent</li><li>Page</li><li>Row</li></ul><p><img src="/./pics/image-20240824141841982.png" alt="image-20240824141841982"></p><blockquote><p>应用场景：要求事务完整性，并发条件下要求数据的一致性，数据操作包括增删改查</p></blockquote><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>sdi 存储表结构消息</li><li>MYD 存储数据</li><li>MYI 存储索引</li></ul><blockquote><p>应用场景：以读操作和插入操作为主，对事务完整性，并发性要求不高；但目前该场景下一般用NoSQL数据库如MongoDB</p></blockquote><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>该引擎将数据存在内存中。</p><ul><li>内存存放</li><li>hash索引</li></ul><p>文件：</p><ul><li>sdi</li></ul><p><img src="/./pics/image-20240824142421073.png" alt="image-20240824142421073"></p><blockquote><p>应用场景：用于临时表及缓存</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2024/08/20/Redis%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/08/20/Redis%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p>redis是一个键值存储系统，其数据存储在内存中，故常作为后端应用的缓存数据库来提高存储层的数据吞吐量。</p><p>特点：</p><ul><li>键值型存储</li><li>单线程（指命令执行）</li><li>低延迟，速度快</li></ul><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>通用命令查询指令：<code>help @generic</code></p><p>常见redis通用命令：</p><ul><li>keys 查询键值（支持模糊查询，生产环境不适用）</li><li>del 删除键值，返回成功删除的键值对数</li><li>exists 判断key是否存在</li><li>expire 给一个key设置有效期</li><li>ttl 查看一个key的剩余有效期</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>redis中最简单的存储类型。根据字符串格式可分为3类：</p><ul><li>string 普通字符串</li><li>int 整型</li><li>float 浮点型</li></ul><p>int和float可以做增减操作；字符串类型最大空间不能超过512MB</p><p>常用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> name john</span><br><span class="line"></span><br><span class="line">get name # john</span><br><span class="line"></span><br><span class="line">mset k1 v1 k2 v2 k3 <span class="number">1</span> k4 <span class="number">0</span>.<span class="number">5</span></span><br><span class="line"></span><br><span class="line">mget name k1 k2 </span><br><span class="line">#<span class="number">1</span>) john</span><br><span class="line">#<span class="number">2</span>) v1</span><br><span class="line">#<span class="number">3</span>) v2</span><br><span class="line"></span><br><span class="line">incr k3 # <span class="number">2</span></span><br><span class="line"></span><br><span class="line">incrby k3 <span class="number">2</span> # <span class="number">4</span></span><br><span class="line"></span><br><span class="line">decrby k3 <span class="number">2</span> # <span class="number">2</span></span><br><span class="line"></span><br><span class="line">decr k3 # <span class="number">1</span></span><br><span class="line"></span><br><span class="line">incrbyfloat k4 <span class="number">0</span>.<span class="number">6</span></span><br><span class="line"></span><br><span class="line">setnx k1 v4 # <span class="number">0</span></span><br><span class="line">get k1 # v1</span><br><span class="line"></span><br><span class="line">setex k5 <span class="number">10</span> <span class="number">1</span> # expire为<span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>推荐的key命名方式：项目名:业务名:类型:id；可实现key的分级存储</p></blockquote><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>hash类型允许在redis中存储键值对，每个哈希都有一个唯一的键，并且包含多个字段（field）到值（value）的映射对，类似golang中的map，python的dict。</p><p>常见命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># hset key field value</span><br><span class="line">hset web:user:<span class="number">1</span> name john</span><br><span class="line">hset web:user:<span class="number">1</span> email <span class="number">123</span>@qq.com</span><br><span class="line"></span><br><span class="line">hget web:user:<span class="number">1</span> name # john</span><br><span class="line">hget web:user:<span class="number">1</span> email # <span class="number">123</span>@qq.com</span><br><span class="line"></span><br><span class="line"># 还有类似mset mget的 hmset hmget</span><br><span class="line"></span><br><span class="line">hgetall web:user:<span class="number">1</span></span><br><span class="line">#<span class="number">1</span>) &quot;name&quot;</span><br><span class="line">#<span class="number">2</span>) &quot;john&quot;</span><br><span class="line">#<span class="number">3</span>) &quot;email&quot;</span><br><span class="line">#<span class="number">4</span>) &quot;<span class="number">123</span>@qq.com&quot;</span><br><span class="line"></span><br><span class="line">hkeys web:user:<span class="number">1</span></span><br><span class="line">#<span class="number">1</span>) &quot;name&quot;</span><br><span class="line">#<span class="number">2</span>) &quot;email&quot;</span><br><span class="line"></span><br><span class="line">hvals web:user:<span class="number">1</span></span><br><span class="line">#<span class="number">1</span>) &quot;john&quot;</span><br><span class="line">#<span class="number">2</span>) &quot;<span class="number">123</span>@qq.com&quot;</span><br><span class="line"></span><br><span class="line"># 还有类似的hincrby hsetnx等命令</span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list通常被用来模拟队列（FIFO，先进先出）或栈（LIFO，后进先出）的行为。列表支持的操作使得它可以非常方便地用作消息队列、任务队列等场景。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lpush list a</span><br><span class="line">lpush list b</span><br><span class="line">rpush list c</span><br><span class="line"></span><br><span class="line">lrange list <span class="number">0</span> <span class="number">2</span></span><br><span class="line">#<span class="number">1</span>) &quot;b&quot;</span><br><span class="line">#<span class="number">2</span>) &quot;a&quot;</span><br><span class="line">#<span class="number">3</span>) &quot;c&quot;</span><br><span class="line"></span><br><span class="line">lpop list # b</span><br><span class="line">rpop list # c</span><br><span class="line">rpop list # a</span><br><span class="line">lpop list # nil</span><br><span class="line"></span><br><span class="line"># blpop brpop 类似lpop rpop,但会在没元素时等待指定时间，不会直接返回nil</span><br><span class="line">blpop list <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>集合，类似python的set。特点如下：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集</li></ul><p>常用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sadd s1 <span class="number">1</span></span><br><span class="line">sadd s1 <span class="number">2</span></span><br><span class="line">sadd s2 <span class="number">2</span></span><br><span class="line">sadd s2 <span class="number">3</span></span><br><span class="line"></span><br><span class="line">srem s1 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">scard s2 # <span class="number">2</span></span><br><span class="line">sismember s2 <span class="number">2</span> # yes</span><br><span class="line">smembers s2</span><br><span class="line">#<span class="number">1</span>) <span class="number">2</span></span><br><span class="line">#<span class="number">2</span>) <span class="number">3</span></span><br><span class="line"></span><br><span class="line">sinter s1 s2</span><br><span class="line"># <span class="number">2</span></span><br><span class="line"></span><br><span class="line">sdiff s2 s1</span><br><span class="line"># <span class="number">3</span></span><br><span class="line"></span><br><span class="line">sunion s1 s2</span><br><span class="line">#<span class="number">1</span>) <span class="number">2</span></span><br><span class="line">#<span class="number">2</span>) <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="SortedSet"><a href="#SortedSet" class="headerlink" title="SortedSet"></a>SortedSet</h2><p>可排序的set，底层每个元素都拥有一个score属性，可以基于score属性对元素进行排序</p><p>常见命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zadd z1 <span class="number">10</span> john</span><br><span class="line">zrem z1 john</span><br><span class="line"></span><br><span class="line">zadd z1 <span class="number">5</span> john</span><br><span class="line">zadd z1 <span class="number">6</span> blob</span><br><span class="line">zscore z1 john # <span class="number">5</span></span><br><span class="line">zrank z1 john # <span class="number">0</span></span><br><span class="line">zcard z1 # <span class="number">2</span></span><br><span class="line">zcount z1 <span class="number">3</span> <span class="number">6</span> # <span class="number">2</span></span><br><span class="line">zincrby z1 <span class="number">2</span> john # <span class="number">7</span></span><br><span class="line">zrange z1 <span class="number">0</span> <span class="number">1</span></span><br><span class="line">#<span class="number">1</span>) blob</span><br><span class="line">#<span class="number">2</span>) john</span><br><span class="line">zrangebyscore z1 <span class="number">5</span> <span class="number">6</span></span><br><span class="line">#<span class="number">1</span>) blob</span><br><span class="line">zdiff/zinter/zunion</span><br></pre></td></tr></table></figure><h2 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h2><p>BitMap时用于存储和操作位级别的数据，它通常用于表示大量布尔值的状态。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">setbit status <span class="number">0</span> <span class="number">1</span></span><br><span class="line">setbit status <span class="number">1</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">getbit status <span class="number">0</span> # <span class="number">1</span></span><br><span class="line">getbit status <span class="number">1</span> # <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># 本质上bitmap就是字符串</span><br><span class="line"><span class="built_in">set</span> status &quot;\x0F&quot;</span><br><span class="line"></span><br><span class="line">getbit status <span class="number">3</span> # <span class="number">0</span></span><br><span class="line">getbit status <span class="number">4</span> # <span class="number">1</span></span><br><span class="line"></span><br><span class="line">bitcount status # <span class="number">4</span></span><br><span class="line"></span><br><span class="line">bitpos status <span class="number">0</span> # <span class="number">0</span></span><br><span class="line">bitpos status <span class="number">1</span> # <span class="number">4</span></span><br><span class="line">bitpos status <span class="number">0</span> <span class="number">3</span> <span class="number">4</span> bit # <span class="number">3</span></span><br><span class="line">bitpos status <span class="number">0</span> <span class="number">3</span> <span class="number">4</span> [byte]# -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><p>HyperLogLog (HLL) 是一种用于估计大量数据中不同元素（即基数）数量的数据结构。它牺牲了一定的精确性，换来了更小的内存消耗。</p><p>常用命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pfadd product1 fruit vegetable</span><br><span class="line">pfcount product1</span><br><span class="line"></span><br><span class="line">pfadd product2 meat milk</span><br><span class="line"></span><br><span class="line">pfmerge result product1 product2</span><br><span class="line"></span><br><span class="line">pfcount result</span><br><span class="line"># <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2024/08/20/MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>/2024/08/20/MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，是不可分割的工作单位。事务中的所有操作要么同时成功，要么同时失败。事务保证了MySQL的ACID特性。</p><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法一</span></span><br><span class="line"><span class="keyword">start</span> transation;</span><br><span class="line">...</span><br><span class="line"><span class="comment">-- 提交|回滚</span></span><br><span class="line"><span class="keyword">commit</span><span class="operator">|</span><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法二</span></span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">commit</span><span class="operator">|</span><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul><li>Atomicity 原子性， 事务是不可分割的最小操作单元，要么全部成功，要么全部失败</li><li>Consistency 一致性， 事务完成，必须使所有数据保持一致性</li><li>Isolation 隔离性， 数据库系统提供隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>Durablitiy 持久性， 事务一旦提交或回滚，对数据的改变是永久的</li></ul><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>并发事务一般会有以下问题：</p><ul><li>脏读：一个事务读到另一个事务还没提交的数据</li><li>不可重复读：一个事务先后读取同一记录，但两次读取的数据不同</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，又发现该数据已经存在</li></ul><p>MySQL隔离级别：</p><ul><li>Read uncommitted</li><li>Read committed 解决了脏读</li><li>Repeatable Read (default) 解决了脏读和不可重复读</li><li>Serializable 解决了脏读+不可重复+幻读</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询事务隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@TRANSACTION</span>_ISOLATION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别</span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level [level];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用函数</title>
      <link href="/2024/08/19/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2024/08/19/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ul><li>concat(s1, s2, …, sn) 拼接多个字符串</li><li>upper(s) 将字符串中所有字符转化为大写字母</li><li>lower(s) 将字符串中所有字符转化为小写字母</li><li>lpad(str, n, pad) 用pad左填充字符串str至长度为n的字符串</li><li>rpad(str, n, pad) 类似lpad，但右填充</li><li>trim(str) 去掉字符串头尾的空格</li><li>length(str) 获取字符串长度</li><li>substring(str, start, len) 返回字符串str从start起len长度的字符串(MySQL中字符串下标从1开始计算)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>); <span class="comment">-- Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">-- HELLO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">-- hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>); <span class="comment">-- 0Hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>); <span class="comment">-- Hello0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27; Hello  &#x27;</span>); <span class="comment">-- Hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;MySQL&#x27;</span>, <span class="number">3</span>, length(<span class="string">&#x27;MySQL&#x27;</span>) <span class="operator">-</span> <span class="number">2</span>); <span class="comment">-- SQL</span></span><br></pre></td></tr></table></figure><h2 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h2><ul><li>ceil(x) 向上取整</li><li>floor(x) 向下取整</li><li>mod(x, y) 求 x % y</li><li>rand() 返回一个0到1的浮点数</li><li>round(x, y) 对x进行四舍五进，保留y位小数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.1</span>); <span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.1</span>); <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">9</span>, <span class="number">4</span>); <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">1</span> <span class="operator">/</span> <span class="number">3</span>, <span class="number">3</span>); <span class="comment">-- 0.333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 生成6位随机数字</span></span><br><span class="line"><span class="keyword">select</span> lpad(<span class="built_in">floor</span>(rand() <span class="operator">*</span> <span class="number">1000000</span>), <span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ul><li>curdate() 返回当前日期（年月日）</li><li>curtime()         返回当前时间（时分秒）</li><li>now()              返回当前日期+时间（YY-MM-DD HH:MM:SS)</li><li>year(date)       解析日期字符串并返回年份</li><li>month(date)   解析日期字符串并返回月份</li><li>day(date)        解析日期字符串并返回天数</li><li>date_add(date, interval expr type) 计算date加上一个日期偏移量的结果</li><li>datediff(date1, date2)  返回date1到date2的日数差</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> now(); <span class="comment">-- 2024-08-19 15:40:00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> curdate(); <span class="comment">-- 2024-08-19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> curtime(); <span class="comment">-- 15:40:00</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">&#x27;2024-08-19 15:40:00&#x27;</span>); <span class="comment">-- 2024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(<span class="string">&#x27;2024-08-19 15:40:00&#x27;</span>); <span class="comment">-- 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(<span class="string">&#x27;2024-08-19 15:40:00&#x27;</span>); <span class="comment">-- 19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2024-08-19 15:40:00&#x27;</span>, <span class="type">interval</span> <span class="number">1</span> <span class="keyword">day</span>); <span class="comment">-- 2024-08-20 15:40:00 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2024-08-20 15:40:00&#x27;</span>, <span class="string">&#x27;2024-08-19 15:40:00&#x27;</span>); <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure><h2 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h2><ul><li>if(value, t, f), 若value为真，则返回t，否则返回f</li><li>ifnull(value1, value2) , 若value1不为空，则返回value1，否则返回value2</li><li>case when [val1] then [res] … end 条件分支语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="literal">true</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>); <span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2&#x27;</span>); <span class="comment">-- &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="keyword">null</span>, <span class="string">&#x27;2&#x27;</span>); <span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- http://sqlmother.yupi.icu/#/learn/level13</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  name,</span><br><span class="line">  <span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> (age <span class="operator">&gt;</span> <span class="number">60</span>) <span class="keyword">THEN</span> <span class="string">&#x27;老同学&#x27;</span></span><br><span class="line">    <span class="keyword">WHEN</span> (age <span class="operator">&gt;</span> <span class="number">20</span>) <span class="keyword">THEN</span> <span class="string">&#x27;年轻&#x27;</span></span><br><span class="line">    <span class="keyword">ELSE</span> <span class="string">&#x27;小同学&#x27;</span></span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">AS</span> age_level</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  name <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础(基于MySQL)</title>
      <link href="/2024/08/19/SQL%E5%9F%BA%E7%A1%80(%E5%9F%BA%E4%BA%8EMySQL)/"/>
      <url>/2024/08/19/SQL%E5%9F%BA%E7%A1%80(%E5%9F%BA%E4%BA%8EMySQL)/</url>
      
        <content type="html"><![CDATA[<h2 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL(Data Definition Language)"></a>DDL(Data Definition Language)</h2><h3 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h3><ul><li>查询当前所有表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><ul><li>查询表结构</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><ul><li>查询指定表建表语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><h3 id="表创建"><a href="#表创建" class="headerlink" title="表创建"></a>表创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TABLE_NAME (</span><br><span class="line">COLUMN_NAME TYPE [COMMENT] [<span class="keyword">CONDITION</span>],</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>数值类型<ul><li>TINYINT 1byte</li><li>SMALLINT      2bytes</li><li>MEDIUMINT  3bytes</li><li>INT &#x2F; INTEGER 4bytes</li><li>SIGINT            8bytes</li><li>FLOAT             4bytes  float(m, d) 类似decimal</li><li>DOUBLE          8bytes  double(m,d) 类似decimal</li><li>DECIMAL        decimal(a,b) a表示小数点左边能存储的十进制数字最大数，b表示小数点右边…</li></ul></li></ul><blockquote><p>对于数值类型，可以在字段约束条件中使用unsigned来声明无符号类型。</p></blockquote><ul><li>字符串类型<ul><li>CHAR CHAR(N) 定长为n的字符串</li><li>VARCHAR VARCHAR(N) 最长为n的字符串</li><li>TINYTEXT, BLOB, TEXT, … 等长文本或二进制数据</li></ul></li><li>日期类型<ul><li>DATE</li><li>TIME</li><li>YEAR</li><li>DATETIME 日期+时间</li><li>TIMESTAMP 时间戳</li></ul></li></ul><h3 id="表修改"><a href="#表修改" class="headerlink" title="表修改"></a>表修改</h3><h4 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> TYPE [COMMENT] [<span class="keyword">CONDITION</span>];</span><br></pre></td></tr></table></figure><h4 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME MODIFY <span class="keyword">COLUMN</span> NEWTYPE;</span><br></pre></td></tr></table></figure><h4 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME RENAME <span class="keyword">TO</span> NEW_COLUMN;</span><br></pre></td></tr></table></figure><h4 id="修改字段名和类型"><a href="#修改字段名和类型" class="headerlink" title="修改字段名和类型"></a>修改字段名和类型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME CHANGE OLD_COLUMN NEW_COLUMN NEWTYPE [COMMENT] [<span class="keyword">CONDITION</span>];</span><br></pre></td></tr></table></figure><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME <span class="keyword">DROP</span> <span class="keyword">COLUMN</span>;</span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] TABLE_NAME;</span><br></pre></td></tr></table></figure><h4 id="删除并重新创建表"><a href="#删除并重新创建表" class="headerlink" title="删除并重新创建表"></a>删除并重新创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><h2 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML (Data Manipulation Language)"></a>DML (Data Manipulation Language)</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TABLE_NAME [(COLUMN1, COLUMN2, ...)] <span class="keyword">VALUES</span> (VALUE1, VALUE2,...), (VALUE1, VALUE2,...), ...;</span><br></pre></td></tr></table></figure><blockquote><p>添加数据时忽略未给出字段，则表明给全部字段添加数据</p></blockquote><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> TABLE_NAME <span class="keyword">SET</span> COLUMN1<span class="operator">=</span>VALUE1, COLUMN2<span class="operator">=</span>VALUE2,...</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">CONDITION</span>];</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">TABLE</span> [<span class="keyword">WHERE</span> <span class="keyword">CONDITION</span>];</span><br></pre></td></tr></table></figure><h2 id="DQL-Data-Query-Language"><a href="#DQL-Data-Query-Language" class="headerlink" title="DQL(Data Query Language)"></a>DQL(Data Query Language)</h2><p>关键知识点：</p><ul><li>选择查询</li><li>别名</li><li>where条件</li><li>order by排序</li><li>group by分组</li><li>limit 截断和偏移</li><li>case when then … end条件分支</li><li>having条件（针对group by 分组）</li><li>内连接、外连接</li><li>聚合函数</li><li>开窗函数</li><li>子查询, exist, in</li><li>with as语句</li></ul><h2 id="DCL-Data-Control-Language"><a href="#DCL-Data-Control-Language" class="headerlink" title="DCL(Data Control Language)"></a>DCL(Data Control Language)</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;hostname&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用通配符%来表示任意主机。</p></blockquote><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;hostname&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;newpassword&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;hostname&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;hostname&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="赋予权限"><a href="#赋予权限" class="headerlink" title="赋予权限"></a>赋予权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span><span class="operator">|</span>OTHER PRIVILEGE <span class="keyword">ON</span> DATABASE.TABLE <span class="keyword">TO</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;hostname&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span><span class="operator">|</span>OTHER PRIVILEGE <span class="keyword">ON</span> DATABASE.TABLE <span class="keyword">FROM</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;hostname&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang并发</title>
      <link href="/2024/07/29/Golang%E5%B9%B6%E5%8F%91/"/>
      <url>/2024/07/29/Golang%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>并行与并发的区别：</p><ul><li>并发是指一个处理器同时处理多个任务。</li><li>并行是指多个处理器或者是多核的处理器同时处理多个不同的任务。</li></ul></blockquote><p>Go 的并发模型基于 <strong>协程</strong> 和 <strong>通道</strong>（channels）。</p><h2 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h2><p>Goroutine就是Go并发中的协程，是一种更轻量的用户级线程，由Go在运行时管理。特点如下：</p><ul><li>轻量：系统线程栈空间通常$\ge$1MB，Goroutine 的栈空间初始大小只有 2KB，可以动态扩容</li><li>高效：Goroutine 的调度器采用 M:N 模型，可以将 M 个 Goroutine 映射到 N 个 OS 线程上，实现高效调度</li><li>高并发：可创建数十万协程</li><li>方便：在Golang中，只要在函数调用前加上关键字<code>go</code>就可以启动异步Goroutine</li></ul><p>这里给出一个简单的Goroutine例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Worker %d started\n&quot;</span>, id)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Worker %d finished\n&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">go</span> worker(i) <span class="comment">// 启动worker协程</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second) <span class="comment">// 阻塞主线程，等待所有worker完成</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Worker 1 started</span></span><br><span class="line"><span class="comment">Worker 0 started</span></span><br><span class="line"><span class="comment">Worker 4 started</span></span><br><span class="line"><span class="comment">Worker 3 started</span></span><br><span class="line"><span class="comment">Worker 2 started</span></span><br><span class="line"><span class="comment">Worker 2 finished</span></span><br><span class="line"><span class="comment">Worker 4 finished</span></span><br><span class="line"><span class="comment">Worker 3 finished</span></span><br><span class="line"><span class="comment">Worker 0 finished</span></span><br><span class="line"><span class="comment">Worker 1 finished</span></span><br><span class="line"><span class="comment">Done.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>这里补充一个<strong>Go1.22</strong>之前的版本存在的一个问题。在<strong>Go1.22</strong>之前，对于 <code>for</code> 循环中的范围表达式（<code>for range</code>），循环变量的初始化是在循环开始时仅执行一次的。这意味着每次循环迭代时，都会使用同一个变量，而不是为每次迭代创建一个新的变量副本。</p><p>通常情况下不会出现问题，除了<code>for range</code>循环变量和Goroutine结合使用时：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    alpha := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> alpha &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%s&quot;</span>, v)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直观上觉得程序会输出<code>&quot;ab&quot;</code>，但实际上往往会输出<code>&quot;bb&quot;</code>。这是因为goroutine是异步的，当第一个循环结束时，程序可能还未打印出<code>v</code>，结果进入第二个循环后，<code>v</code>被修改为了<code>&quot;b&quot;</code>，两个goroutine就都打印了最后的<code>v</code>，即结果为<code>&quot;bb&quot;</code></p><p>解决办法：</p><ol><li>函数传参</li><li>创建新局部变量</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    alpha := []<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">    <span class="comment">// 方法1</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> alpha &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">&quot;%s&quot;</span>, x)</span><br><span class="line">        &#125;(v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法2</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> alpha &#123;</span><br><span class="line">        newV := v</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;%s&quot;</span>, newV)</span><br><span class="line">        &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Go1.22中，<code>for range</code>循环变量改成为每次迭代创建一个新的变量副本，故不存在上述问题了。</p><h2 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h2><p><code>channel</code>是Go中的一种复杂数据类型，可看作特殊的队列，具有先进先出的特点，用于同步协程间通信。一般用于协程间的数据通信。</p><h3 id="声明格式"><a href="#声明格式" class="headerlink" title="声明格式"></a>声明格式</h3><p>一般的通道声明格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var ch chan [type]</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="comment">// 当然你还可以指定缓冲区大小</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>一个通道只能传输一种类型的数据；所有的类型的数据都可以用于通道，包括空接口。</p><p>使用<code>make()</code>对通道进行声明时，如果不指定缓冲区大小，则返回<strong>无缓冲通道</strong>，否则返回<strong>带缓冲通道</strong>。</p><p>通道中还有<strong>只读通道</strong>和<strong>只写通道</strong>。当然，声明一个只读或只写的通道没有意义，所以这两种通道一般用于构建函数参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reader</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;&#125; <span class="comment">// 只读通道</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Writer</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;&#125; <span class="comment">// 只写通道</span></span><br></pre></td></tr></table></figure><p>这样就可以保证<code>Reader</code>中ch通道是只读的，<code>Writer</code>中<code>ch</code>通道是只写的。下文会给出更详细的例子。</p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向通道写入10</span></span><br><span class="line">ch &lt;- <span class="number">10</span> </span><br></pre></td></tr></table></figure><p>值得注意的是，当向一个无缓冲通道（或者有缓冲但会写入数据量超过缓冲区的通道）写入数据时，必须保证有一个读协程随时准备从通道数据，否则会出现死锁报错：<code>fatal error: all goroutines are asleep - deadlock!</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    ch &lt;- <span class="number">5</span> <span class="comment">// Dead lock!</span></span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(&lt;-ch)</span><br><span class="line">    &#125;()</span><br><span class="line">    ch &lt;- <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读操作的第二个返回值如果是false，则管道关闭且为空</span></span><br><span class="line">ret, ok := &lt;-ch</span><br><span class="line"><span class="comment">// 当然你也可以省略ok</span></span><br><span class="line">ret := &lt;-ch</span><br></pre></td></tr></table></figure><p>注意的是，当尝试向空通道进行读操作时，会引发<strong>通道阻塞</strong>，直到通道中有新值写入，这样新值就会被读出，并结束阻塞。</p><h3 id="关闭channel"><a href="#关闭channel" class="headerlink" title="关闭channel"></a>关闭channel</h3><p>通道是可以关闭的。一旦关闭，就无法向该channel写入数据。<strong>注意的是</strong>，空通道关闭后，仍可以多次从通道读出零值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// 0</span></span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// 0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Channel closed&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="遍历channel"><a href="#遍历channel" class="headerlink" title="遍历channel"></a>遍历channel</h3><p>想要遍历<code>channel</code>前，必须先关闭<code>channel</code>。关闭<code>channel</code>后就不能向<code>channel</code>写入数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭通道</span></span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad!</span></span><br><span class="line">ch &lt;- <span class="number">10</span> <span class="comment">// panic: send on closed channel</span></span><br></pre></td></tr></table></figure><p>遍历方法一般有两种，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案A，能自动检测管道是否关闭</span></span><br><span class="line"><span class="keyword">for</span> val := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    fmt.Println(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案B</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    val, ok := &lt;- ch</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125; </span><br><span class="line">    fmt.Println(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad!</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ch); i++ &#123;</span><br><span class="line">    <span class="comment">// len(ch)会变化！</span></span><br><span class="line">    fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Select语句"><a href="#Select语句" class="headerlink" title="Select语句"></a>Select语句</h3><p>Go中的<code>select</code>语句是专门处理通道操作的语句，一般与<code>for</code>语句配合使用，也被频繁用在Go的并发编程中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ch1:</span><br><span class="line">        <span class="comment">// 当 ch1 准备好接收时执行这里的代码</span></span><br><span class="line">    <span class="keyword">case</span> ch2 &lt;- <span class="string">&quot;value&quot;</span>:</span><br><span class="line">        <span class="comment">// 当 ch2 准备好发送时执行这里的代码</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 如果没有通道准备就绪，则执行这里的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>select语句特点如下：</p><ol><li><strong>非阻塞</strong>:<ul><li>如果没有任何 case 的通道准备就绪，<code>select</code> 语句将选择执行 <code>default</code> 子句（如果有的话）。</li><li>如果没有 <code>default</code> 子句并且所有 case 的通道都不准备就绪，则 <code>select</code> 语句将阻塞，直到其中一个通道准备就绪。</li></ul></li><li><strong>随机选择</strong>:<ul><li>如果有多个 case 的通道都准备就绪，<code>select</code> 语句将随机选择一个 case 来执行。</li><li>这种随机选择有助于避免死锁和其他竞态条件。</li></ul></li><li><strong>case 表达式</strong>:<ul><li><code>select</code> 语句的每个 case 必须是一个通道操作，例如发送或接收。</li></ul></li></ol><h2 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h2><p>除了<code>channel</code>，Go中还提供了一些重要的工具来协调goroutine之间的同步。<code>sync</code>包下的<code>WaitGroup</code>是其中之一。</p><p><code>WaitGroup</code>用于确保一些goroutine完成其任务后程序再执行其他内容。这里我们可以回顾一下全文的第一个代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">go</span> worker(i) <span class="comment">// 启动worker协程</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second) <span class="comment">// 阻塞主线程，等待所有worker完成</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>time.Sleep(5 * time.Second)</code>是用于阻塞主线程的进行，来确保goroutine执行完再打印最后的<code>&quot;Done.&quot;</code>。显然我们无法预测所有程序的goroutine执行所需的大概时间，所以这里使用<code>WaitGroup</code>可以更有效地同步协程与主线程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Printf(<span class="string">&quot;Worker %d started\n&quot;</span>, id)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Worker %d finished\n&quot;</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">5</span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> worker(i, &amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;All workers finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码变换体现在<code>worker</code>函数和<code>main</code>函数中。<code>WaitGroup</code>本质上用一个<strong>计数器</strong>来实现协程的同步。接下来是对<code>WaitGroup</code>的三个方法的解释。</p><h3 id="WaitGroup-Add"><a href="#WaitGroup-Add" class="headerlink" title="WaitGroup.Add"></a>WaitGroup.Add</h3><p>用于向计数器添加一个计数值，表示当前任务列表中新值了多少任务（参数为负数时表示减少）。一般在你想协调的goroutine<strong>任务执行前</strong>调用<code>wg.Add(n)</code>。</p><p>最好不要使<code>Add</code>和<code>Wait</code>并发调用，否则有可能会达不到同步协程的效果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            wg.Add(<span class="number">1</span>)</span><br><span class="line">            doSomething()</span><br><span class="line">            wg.Done()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">    doMain()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该例子中，我们期望goroutine都执行完后执行<code>doMain()</code>，但实际上很有可能在goroutine开始执行前（执行<code>wg.Add(1)</code>前）就跳过了<code>wg.Wait()</code>，导致提前执行<code>doMain()</code>。</p><h3 id="WaitGroup-Done"><a href="#WaitGroup-Done" class="headerlink" title="WaitGroup.Done"></a>WaitGroup.Done</h3><p>用于让计数器减一，表示当前列表中有一个任务完成了。事实上，<code>wg.Done()</code>的底层实现就是<code>wg.Add(-1)</code>。一定要在每个goroutine完成任务后执行<code>wg.Done()</code>，否则会造成死锁。</p><p>当然执行了多余的<code>wg.Done()</code>也会导致死锁。</p><h3 id="WaitGroup-Wait"><a href="#WaitGroup-Wait" class="headerlink" title="WaitGroup.Wait"></a>WaitGroup.Wait</h3><p>执行函数时，检测当前计数器的值是否为0，不是则阻塞当前进程&#x2F;协程。</p><blockquote><p>在需要将<code>WaitGroup</code>变量传入协程函数时，要使用指针引入，而不是值引入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, wg sync.WaitGroup)</span></span> &#123; <span class="comment">// 值引入，Bad!</span></span><br><span class="line">    <span class="keyword">defer</span> wg.Done() <span class="comment">// 看似wg.Done()执行了，实际上和main中的wg没关系。</span></span><br><span class="line">    doSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">5</span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> worker(i, &amp;wg)</span><br><span class="line">&#125;</span><br><span class="line">    wg.Wait() <span class="comment">// wg没Done()过，死锁。</span></span><br><span class="line">fmt.Println(<span class="string">&quot;All workers finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Mutex"><a href="#Mutex" class="headerlink" title="Mutex"></a>Mutex</h2><p>在进行并发操作时，对于临界区的操作需要通过加锁来实现并发安全。Golang标准包<code>sync</code>提供了两种锁：</p><ul><li>互斥锁（Mutex）</li><li>读写锁（RWMutex）</li></ul><h3 id="Mutex-1"><a href="#Mutex-1" class="headerlink" title="Mutex"></a>Mutex</h3><p><code>Mutex</code>就两个方法：<code>Lock()</code>和<code>Unlock()</code>，对临界区操作前<code>Lock()</code>，如果有其他goroutine获取的锁，当前goroutine阻塞，否则当前goroutine获得锁（信号量机制），操作结束后<code>Unlock()</code>。</p><p>这里给一个场景：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">cnt := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">cnt++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(cnt) <span class="comment">// 97856</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于条件竞争，<code>cnt</code>并没有累加到100000。通过上锁就能解决问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">cnt := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> mu.Unlock()</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">cnt++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(cnt) <span class="comment">// 100000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RWMutex"><a href="#RWMutex" class="headerlink" title="RWMutex"></a>RWMutex</h3><p><code>RWMutex</code>相比互斥锁，它允许多个读操作同时进行，但在写操作进行时，会阻塞所有的读操作和写操作。这样可以提高并发性能。</p><p><code>RWMutex</code>提供了四个方法：<code>RLock()</code>，<code>RUnlock()</code>，<code>Lock()</code>，<code>Unlock()</code>，前两者用于读操作，后两者用于写操作。使用方法与<code>Mutex</code>类似。</p><h2 id="Atomic"><a href="#Atomic" class="headerlink" title="Atomic"></a>Atomic</h2><p><code>sync/atomic</code>包提供了Golang中的一些<strong>原子变量</strong>和<strong>原子操作</strong>。原子操作，即不会被分割的操作，作用上与互斥锁相似，但底层由CPU指令实现，不涉及加锁解锁，故性能高于互斥锁。原子变量则是用于执行原子操作的特殊变量。</p><p><code>sync/atomic</code>中原子操作一共有五类：</p><ul><li>读取（Load）</li><li>写入（Store）</li><li>交换（Swap）</li><li>比较并交换 （CompareAndSwap）</li><li>增减（Add）</li></ul><p><code>sync/atomic</code>中原子变量类型有以下几种：</p><ul><li>bool 布尔值</li><li>(u)int32 32位整型</li><li>(u)int64 64位整型</li><li>pointer 不可参与指针运算的指针</li><li>uinptr  无法持有对象的指针</li><li>value 空接口</li></ul><p>所有的原子变量都实现了前四类的原子操作方法（Load, Store, Swap, CompareAndSwap）,能参与加减运算的类型还实现了第五类原子操作方法（Add）</p><h3 id="原子操作函数"><a href="#原子操作函数" class="headerlink" title="原子操作函数"></a>原子操作函数</h3><p>原子操作函数中第一个参数往往是数据地址，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        wg sync.WaitGroup</span><br><span class="line">        count <span class="type">int64</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> <span class="number">100000</span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="comment">// atomic.AddInt64(addr *int64, delta int64)</span></span><br><span class="line">atomic.AddInt64(&amp;count, <span class="number">1</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(count) <span class="comment">// 100000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原子操作函数的操作对象限制在<code>(u)int32</code>,<code>(u)int64</code>,<code>uintptr</code>,<code>Pointer</code>上。</p><h3 id="原子操作方法"><a href="#原子操作方法" class="headerlink" title="原子操作方法"></a>原子操作方法</h3><p>官方文档更推荐使用原子变量，通过调用其方法来进行原子操作。这样比直接调用原子操作函数更加直观和不容易出错，支持的操作对象类型的更多。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        wg sync.WaitGroup</span><br><span class="line">        count atomic.Int64</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> <span class="number">100000</span> &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">            count.Add(<span class="number">1</span>)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">    fmt.Println(count.Load()) <span class="comment">// 100000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>Golang中<code>context</code>可用来定义goroutine的上下文，用优雅的方式传递取消信号和设置超时。</p><h3 id="创建根节点Context"><a href="#创建根节点Context" class="headerlink" title="创建根节点Context"></a>创建根节点Context</h3><p>有两种方法创建空context：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line">ctx := context.TODO()</span><br></pre></td></tr></table></figure><p>两种方法能返回一个没有 deadline、没有取消函数的 <code>context.Context</code> 对象，只有语义的区别，即：</p><ul><li><strong><code>context.Background()</code></strong>:<ul><li>表示一个顶层或根上下文。</li><li>适用于程序启动时或作为顶级上下文来开始处理一个请求。</li><li>一般用于实际的生产代码中。</li></ul></li><li><strong><code>context.TODO()</code></strong>:<ul><li>表示一个待办事项上下文。</li><li>主要用于代码尚未完成时作为占位符。</li><li>不推荐在生产代码中使用。</li></ul></li></ul><h3 id="创建派生节点"><a href="#创建派生节点" class="headerlink" title="创建派生节点"></a>创建派生节点</h3><p>派生节点由根节点派生而来，用形如<code>WithXXX</code>格式的函数进行创建。</p><h4 id="WithValue"><a href="#WithValue" class="headerlink" title="WithValue"></a>WithValue</h4><p>创建一个带键值对的节点，同时保留父节点的数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WithValue(parent Context, key, val any) Context</span></span><br><span class="line">ctx := context.WithValue(context.Background(), <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>)</span><br><span class="line">son := context.WithValue(ctx, <span class="string">&quot;son&quot;</span>, <span class="string">&quot;234567&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(ctx.Value(<span class="string">&quot;root&quot;</span>).(<span class="type">string</span>)) <span class="comment">// 123456</span></span><br><span class="line">fmt.Println(son.Value(<span class="string">&quot;son&quot;</span>).(<span class="type">string</span>)) <span class="comment">// 234567</span></span><br></pre></td></tr></table></figure><h4 id="WithCancel"><a href="#WithCancel" class="headerlink" title="WithCancel"></a>WithCancel</h4><p>创建一个派生节点和终止该节点执行的<code>cancel()</code>函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">wg sync.WaitGroup</span><br><span class="line">ch = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">)</span><br><span class="line">    <span class="comment">// WithCancel(ctx Context) (Context, CancelFunc)</span></span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 生产者协程: 不断生成数据并放入通道直到消费者取消读取</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">fmt.Println(<span class="string">&quot;生产者协程退出&quot;</span>)</span><br><span class="line">wg.Done()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">fmt.Println(<span class="string">&quot;生产者协程生产了一个数据&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 消费者协程：消费10个数据后就取消任务</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">fmt.Println(<span class="string">&quot;消费者协程消费了一个数据&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>ctx</code>就是消费者协程和生产者协程通信的桥梁。通过调用<code>cancel</code>函数，关闭与<code>ctx</code>关联的<code>done channel</code>，这样<code>case &lt;-ctx.Done()</code>就不再阻塞，可以执行关闭生产者的相关代码。父节点被取消后还会将取消消息传递给<strong>所有</strong>派生的子节点。</p><h4 id="WithDeadline"><a href="#WithDeadline" class="headerlink" title="WithDeadline"></a>WithDeadline</h4><p>在<code>WithCancel</code>的基础上，设置一个超时时间。被创建的子<code>context</code>会在指定的时间点自动关闭 <code>Done</code> 通道。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deadline, err := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="string">&quot;2024-12-3123:59:59&quot;</span>)\</span><br><span class="line"><span class="keyword">if</span> err!= <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// WithDeadline(ctx Context, d time.Time) (Context, CancelFunc)</span></span><br><span class="line">ctx, cancel := context.WithDeadline(context.Background(), deadline)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"><span class="comment">// 2024-12-31 23:59:59 才会结束程序</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        fmt.Println(<span class="string">&quot;Context deadline exceeded&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="WithTimeout"><a href="#WithTimeout" class="headerlink" title="WithTimeout"></a>WithTimeout</h4><p>与<code>WithDeadline</code>类似，只不过接受一个持续时间而不是一个绝对时间。事实上<code>WithTimeout(1*time.Second)</code> 等同于 <code>WithDeadline(time.Now().Add(1*time.Second))</code></p><p>这里用生产者-消费者模型，来展示channel的基本使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Producer ，只写</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Producer</span><span class="params">(id <span class="type">int</span>, ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Producer&quot;</span>, id, <span class="string">&quot;started&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> <span class="number">5</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Producer&quot;</span>, id, <span class="string">&quot;sent&quot;</span>, i)</span><br><span class="line">ch &lt;- i</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Producer&quot;</span>, id, <span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Consumer ，只读</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Consumer</span><span class="params">(id <span class="type">int</span>, ch &lt;-<span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Consumer&quot;</span>, id, <span class="string">&quot;started&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">res, ok := &lt;-ch</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Consumer&quot;</span>, id, <span class="string">&quot;received&quot;</span>, res)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;Consumer&quot;</span>, id, <span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动两个生产者和三个消费者</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">Producer(i, ch)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">Consumer(i, ch)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p><code>runtime</code>是Golang的核心组件之一，负责管理程序执行过程中的各种底层细节。这里只介绍一些和并发有关的接口。</p><ul><li><code>runtime.GOMAXPROCS(n)</code>: 设置最多可以并发运行的 CPU 数量。</li><li><code>runtime.Goexit()</code>: 使当前 Goroutine 退出。</li><li><code>runtime.Gosched()</code>: 让出当前 Goroutine 的 CPU 时间片，允许其他 Goroutine 运行。</li></ul><p>这些只是 <code>runtime</code> 包提供的众多功能中的一部分，对于更深入的了解和使用，请查阅官方文档和相关教程。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Golang </tag>
            
            <tag> Concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django入门笔记</title>
      <link href="/2024/02/06/Django%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/06/Django%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Django的安装使用"><a href="#Django的安装使用" class="headerlink" title="Django的安装使用"></a>Django的安装使用</h2><h3 id="Django-安装"><a href="#Django-安装" class="headerlink" title="Django 安装"></a>Django 安装</h3><p>在pycharm里新建项目，在虚拟环境中下载Django包：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure><p>安装之后可以通过以下指令打印Django的版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><p>若终端打印出版本号说明Django安装成功</p><h3 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h3><p>打开终端并输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject demo .</span><br></pre></td></tr></table></figure><p>即可在本目录下创建项目名为<code>demo</code>的Django项目（无外层容器）</p><p>终端先进入<code>demo</code>目录下再输入启动命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./demo</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p>若成功运行Django服务器，说明Django项目创建成功。</p><h3 id="创建Django的一个App"><a href="#创建Django的一个App" class="headerlink" title="创建Django的一个App"></a>创建Django的一个App</h3><p>Django 中的App可理解为网站的某一应用功能，而这种应用功能可以应用独立的<em><strong>表结构、函数、HTML模板</strong></em>等等。一般网站只需一个APP即可</p><p>在终端输入以下命令创建App:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp web</span><br></pre></td></tr></table></figure><p>就可以创建一个名为<code>web</code>的App。</p><h3 id="Django项目结构说明"><a href="#Django项目结构说明" class="headerlink" title="Django项目结构说明"></a>Django项目结构说明</h3><p>使用<code>tree for windows</code>工具可打印目录树，命令与说明如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ tree HelloDjango -I &quot;.venv|*.md|__pycache__&quot;</span><br><span class="line"></span><br><span class="line">HelloDjango</span><br><span class="line">|-- db.sqlite3</span><br><span class="line">|-- demo</span><br><span class="line">|   |-- __init__.py</span><br><span class="line">|   |-- asgi.py             # 异步网络请求处理</span><br><span class="line">|   |-- settings.py         # 项目配置</span><br><span class="line">|   |-- urls.py             # url处理</span><br><span class="line">|   `-- wsgi.py             # 同步网络请求处理 </span><br><span class="line">|-- manage.py               # 提供命令行工具</span><br><span class="line">|-- requirements.txt</span><br><span class="line">`-- web                     # 我们创建的第一个app目录</span><br><span class="line">    |-- __init__.py</span><br><span class="line">    |-- admin.py            # Django自带的admin后台管理</span><br><span class="line">    |-- apps.py             # app启动类</span><br><span class="line">    |-- migrations          # 数据库字段变更记录</span><br><span class="line">    |   `-- __init__.py</span><br><span class="line">    |-- models.py           # 数据库操作</span><br><span class="line">    |-- tests.py            # 单元测试</span><br><span class="line">    `-- views.py            # 视图处理</span><br></pre></td></tr></table></figure><h2 id="视图入门篇"><a href="#视图入门篇" class="headerlink" title="视图入门篇"></a>视图入门篇</h2><h3 id="编写第一个视图"><a href="#编写第一个视图" class="headerlink" title="编写第一个视图"></a>编写第一个视图</h3><ol><li><p>在settings.py注册我们的app:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">INSTALLED_APPS = [          <span class="comment"># 在这里注册我们的app</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app.apps.AppConfig&#x27;</span>        <span class="comment"># 格式为&#123;App名&#125;.apps.&#123;App启动类名&#125;  </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>编写URL和视图函数的对应关系(两种方法)</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo &gt; urls.py （全局url）</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> web <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">&quot;/app/index/&quot;</span>, views.index)</span><br><span class="line">] </span><br></pre></td></tr></table></figure><p> 或者在应用下配置url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web &gt; urls.py </span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"> </span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">&quot;index/&quot;</span>, views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># demo &gt; urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">     path(<span class="string">&quot;app/&quot;</span>, include(<span class="string">&quot;web.urls&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>编写视图函数</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web &gt; views.py    </span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):     <span class="comment"># 视图函数参数request用于处理用户请求，如request.GET, request.POST等等</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello Django&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>之后启动项目即可访问<code>localhost:8000/app/index/</code>路径。</p><h3 id="模板-amp-静态文件"><a href="#模板-amp-静态文件" class="headerlink" title="模板&amp;静态文件"></a>模板&amp;静态文件</h3><p>配置好url和视图函数关系后，使用模板开启SSR应用：</p><ol><li><p>创建相关视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web &gt; views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page01</span>(<span class="params">request</span>):</span><br><span class="line">   <span class="keyword">return</span> render(request, render(<span class="string">&quot;page01.html&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>编写html模板（模板文件放在web &gt; templates 或 demo &gt; templates下）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># web &gt; templates &gt; page01.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page01<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>Welcome to Page01<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入静态文件（静态文件放在与templates同级的static目录下）</p></li></ol><p><img src="/images/django/img.png" alt="img.png"></p><p>值得一提的是，Django中建议使用<code>&#123;% load static %&#125;</code>方法来引入静态文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;css/style.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;js/main.js&#x27; %&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中static路径在<code>setting.py</code>下可配置</p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">templates</span>(<span class="params">request</span>):</span><br><span class="line">   title = <span class="string">&quot;Template Programmar&quot;</span></span><br><span class="line">   info = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;DopamineNone&quot;</span>, <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2024.1.1&quot;</span>&#125;</span><br><span class="line">   content = [<span class="string">&quot;html 占位符&quot;</span>, <span class="string">&quot;render 传参&quot;</span>, <span class="string">&quot;列表参数&quot;</span>, <span class="string">&quot;字典参数&quot;</span>,<span class="string">&quot;循环渲染&quot;</span>]</span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">&quot;templates.html&quot;</span>, &#123; <span class="string">&quot;title&quot;</span>: title, <span class="string">&quot;list&quot;</span>: content, <span class="string">&quot;dict&quot;</span>: info&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Template Programmar<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  占位符的基本使用  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表元素的使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; list.0 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表的迭代 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        &#123;% for item in list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字典的引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; dict &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; dict.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; dict.date &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字典的迭代 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--for key in dict.keys--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--for val in dict.values--&gt;</span></span><br><span class="line">        &#123;% for key, val in dict.items %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; key &#125;&#125; : &#123;&#123; val &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 条件语句 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        &#123;% if title == &quot;Template Programmar&quot;%&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>best!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        &#123;% elif title == &quot;Nothing&quot; %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>bad<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>worst<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板的继承"><a href="#模板的继承" class="headerlink" title="模板的继承"></a>模板的继承</h3><p>为了减少重复的html模板代码，提高模板复用率，我们可以使用模板的继承（类似Vue中的插槽）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--layout.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        ....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在其他页面，我们只需写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--home.html--&gt;</span></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Page Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>这样我们就不必每个html都写基础的布局，只关心当前页面的主要内容即可</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问baidu函数对应的路径时会重定向到百度页面</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><p>假设用户有这么一个表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/app/requests/&quot;</span>&gt;</span></span><br><span class="line">     &#123;% csrf_token %&#125; <span class="comment">&lt;!-- 解决跨域问题 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们处理请求参数可以用<code>request.POST.get(&quot;parameter&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app &gt; views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">temp_request</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.POST)</span><br><span class="line">    name = request.POST.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;request.html&quot;</span>, &#123;<span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;pwd&quot;</span>: pwd&#125;)</span><br></pre></td></tr></table></figure><h2 id="模型入门篇"><a href="#模型入门篇" class="headerlink" title="模型入门篇"></a>模型入门篇</h2><p>Django 自带SQLite3，我们能通过Django的orm框架操作数据库</p><h3 id="创建第一个数据库表"><a href="#创建第一个数据库表" class="headerlink" title="创建第一个数据库表"></a>创建第一个数据库表</h3><p>首先我们得写出模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">类名   -- 表名</span></span><br><span class="line"><span class="string">属性名 -- 字段名 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Question</span>(models.Model):</span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">&quot;date published&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Choice</span>(models.Model):</span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其次我们需要生成迁移文件(可理解为生成响应的SQL命令)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations </span><br></pre></td></tr></table></figure><p>最后我们执行未执行的迁移（执行模型对应的SQL命令）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>表就创建成功</p><h3 id="数据表的增删改查"><a href="#数据表的增删改查" class="headerlink" title="数据表的增删改查"></a>数据表的增删改查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> web <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增数据</span></span><br><span class="line">models.Question.objects.create(question_text=<span class="string">&quot;What the hell?&quot;</span>) <span class="comment"># 有默认值的字段可不写</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">table = models.Question.objects.<span class="built_in">all</span>() <span class="comment"># 列表，元素为行</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> table:</span><br><span class="line">   <span class="built_in">print</span>(item.question_text, <span class="string">&quot; &quot;</span>, item.pub_date)</span><br><span class="line"></span><br><span class="line">matched_list = models.Question.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>) <span class="comment"># 依旧是列表，最多有一项元素</span></span><br><span class="line">matched_el = models.Question.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据</span></span><br><span class="line">models.Question.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">2</span>).delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数据</span></span><br><span class="line">models.Question.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=<span class="number">1</span>).update(question_text=<span class="string">&quot;What the hell?&quot;</span>)</span><br></pre></td></tr></table></figure><p>学到这里，就可以用Django写出完整的web应用了。</p>]]></content>
      
      
      <categories>
          
          <category> Web 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 后端 </tag>
            
            <tag> Django </tag>
            
            <tag> Web 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 学习笔记</title>
      <link href="/2024/01/20/Golang%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B8%85%E5%8D%95/"/>
      <url>/2024/01/20/Golang%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<!-- Golang 知识清单 --><!-- 这篇博客仅是本人在学习Golang语法基础时的一些记录。 --><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li><p>关键词： <code>const</code></p></li><li><p>用法：</p><ol><li>单行声明：<code>const variableName [Type] = value</code></li><li>并行声明：<code>const p1, p2, p3 = v1, v2, v3</code></li><li>多行声明：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beef, two, c = <span class="string">&quot;eat&quot;</span>, <span class="number">2</span>, <span class="string">&quot;veg&quot;</span></span><br><span class="line"><span class="keyword">const</span> Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Monday, Tuesday, Wednesday = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    Thursday, Friday, Saturday = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="声明格式"><a href="#声明格式" class="headerlink" title="声明格式"></a>声明格式</h3><p>单行变量声明格式<code>var name [type] [= val]</code></p><p>多行变量声明格式:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    a <span class="type">int</span></span><br><span class="line">    b <span class="type">bool</span></span><br><span class="line">    str <span class="type">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>也可以同时给多个值声明类型：<code>var a, b, c int</code></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>若未显示初始赋值，则：</p><ul><li>int: 0</li><li>float: 0.0</li><li>string: 空字符串“”</li><li>bool: false</li><li>ptr: nil</li></ul><p>且声明时变量未声明类型，则编译器会通过初始赋值推导变量赋值；当然，未声明类型的变量必需得初始赋值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Right</span></span><br><span class="line"><span class="keyword">var</span> userName = <span class="string">&quot;Joe&quot;</span> <span class="comment">// Go变量命名遵循小驼峰命名法</span></span><br><span class="line"><span class="keyword">var</span> lottery <span class="type">int64</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> temp <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">var</span> unknow</span><br></pre></td></tr></table></figure><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><p>学过C的都懂。</p><p>Go中通过<code>&amp;</code>运算符来得到变量的地址。</p><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p><code>Printf()</code>函数可以在fmt包外使用，可以向控制台打印格式化字符串，同C语言的<code>printf()</code>和Go的<code>fmt.Sprintf()</code>。</p><p><code>fmt.Print()</code>和<code>fmt.Println()</code>的作用一致，使用%v对字符串进行格式化，<code>fmt.Println()</code>会多打印一个\n。</p><h3 id="x3D-初始赋值运算符"><a href="#x3D-初始赋值运算符" class="headerlink" title=":&#x3D; 初始赋值运算符"></a>:&#x3D; 初始赋值运算符</h3><p>可以使用<code>:=</code>来高效地进行变量声明和初始化。</p><p><code>var num = 10</code>就可以简写为<code>num := 10</code>。</p><p><strong>注意</strong>： 对同一个变量只能使用一次<code>:=</code>运算符，否则会报错；对已声明但未使用的局部变量也会出现报错；在变量声明前使用变量也会报错。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>bool</li><li>int&#x2F;uint&#x2F;uintptr<ul><li>int&#x2F;uint 长度与操作系统位数相等, int16&#x2F;int32&#x2F;int64间不能隐式转化，常量除外。</li><li>uintptr 长度足够存放一个指针。</li></ul></li><li>float32&#x2F;float64 <strong>(没有float和double!!! 尽量用float64)</strong></li><li>byte (int8的别名，字符)， 自行了解utf8包。</li><li>string <strong>(Go中字符串没有以’\0’)</strong>, 自行了解strings和strconv包。</li><li>ptr <strong>(Go中指针运算是非法的)</strong></li></ul><h3 id="变量运算"><a href="#变量运算" class="headerlink" title="变量运算"></a>变量运算</h3><p>运算符同C语言；唯一需注意的是带有<code>++</code>、<code>--</code>运算符只能当作语句，像<code>sum = i++</code>这种语句在Go中不合法。</p><p>符号优先级优先级     运算符</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">7      ^ !</span><br><span class="line">6      * / % &lt;&lt; &gt;&gt; &amp; &amp;^</span><br><span class="line">5      + - | ^</span><br><span class="line">4      == != &lt; &lt;= &gt;= &gt;</span><br><span class="line">3      &lt;-</span><br><span class="line">2      &amp;&amp;</span><br><span class="line">1      ||</span><br></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="if-else-结构"><a href="#if-else-结构" class="headerlink" title="if-else 结构"></a>if-else 结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">    <span class="comment">// do something else    </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> val := <span class="number">10</span>; val &gt; max &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>花括号{}无论如何都不能省略</li><li>{与关键字同一行，}也与关键字同一行</li><li>条件中可包含初始化语句</li></ol><h3 id="switch-结构"><a href="#switch-结构" class="headerlink" title="switch 结构"></a>switch 结构</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch 的第一种形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// 空分支，只有当 i == 0 时才会进入分支</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        f() <span class="comment">// 当 i == 0 时函数不会被调用</span></span><br><span class="line">    <span class="keyword">default</span>: </span><br><span class="line">        DoSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        f() <span class="comment">// 当 i == 0 时函数也会被调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch 的第二种形式</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> condition1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> condition2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  switch 的第三种形式</span></span><br><span class="line"><span class="keyword">switch</span> initialization &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for-结构"><a href="#for-结构" class="headerlink" title="for 结构"></a>for 结构</h3><ol><li>基于计数器的for语句结构：<code>for 初始化语句; 条件语句; 修饰语句 &#123;&#125;</code></li><li>基于条件判断的for语句:<code>for 条件语句 &#123;&#125;</code></li><li>无限循环: <code>for &#123;&#125;</code></li><li>for-range结构: <code>for ix, val := range coll &#123; &#125;</code>， <strong>注意</strong>val只是对coll中值的拷贝</li></ol><h3 id="goto-结构"><a href="#goto-结构" class="headerlink" title="goto 结构"></a>goto 结构</h3><p>配合标签使用，不建议使用goto语句</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Go中一共有三种函数：</p><ol><li>具名函数</li><li>匿名函数 (Lambda)</li><li>方法</li></ol><p>而且Go允许一个函数A作为另个函数B的参数传入，只要A的返回值数量和类型与B函数参数一致</p><p>Go 禁止函数重载</p><p>Go中申明一个在外部定义的函数，你只需要给出函数名与函数签名，不需要给出函数体，如<code>func flushICache(begin, end uintptr)</code></p><h3 id="参数和返回值"><a href="#参数和返回值" class="headerlink" title="参数和返回值"></a>参数和返回值</h3><h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><p>传参有两种方式：</p><ol><li>按值传参</li><li>引用传参</li></ol><p>推荐使用引用传参，一般比按值传参有更小的性能开支</p><p>具有多个参数的函数也能直接传入一个包含多个变量的slice作为参数</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回值有一些特性</p><ol><li>可命名可匿名，使用多个匿名返回值或单个及其以上的命名返回值时需要用()括起来</li><li>使用命名返回值则return语句可不带参数</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> numx2, numx3 <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    numx2, numx3 = getX2AndX3(num)</span><br><span class="line">    PrintValues()</span><br><span class="line">    numx2, numx3 = getX2AndX3_2(num)</span><br><span class="line">    PrintValues()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintValues</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;num = %d, 2x num = %d, 3x num = %d\n&quot;</span>, num, numx2, numx3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getX2AndX3</span><span class="params">(input <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * input, <span class="number">3</span> * input</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getX2AndX3_2</span><span class="params">(input <span class="type">int</span>)</span></span> (x2 <span class="type">int</span>, x3 <span class="type">int</span>) &#123;</span><br><span class="line">    x2 = <span class="number">2</span> * input</span><br><span class="line">    x3 = <span class="number">3</span> * input</span><br><span class="line">    <span class="comment">// return x2, x3</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h4><p>空白符<code>_</code>，用于匹配不需要的函数返回值</p><h4 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h4><p>变长参数类型用<code>...type</code>表示，如<code>func myFunc(a, b, arg ...int) &#123;&#125;</code>，该类型和slice很像，可用for迭代。</p><h4 id="defer与追踪"><a href="#defer与追踪" class="headerlink" title="defer与追踪"></a>defer与追踪</h4><p>defer 关键字允许我们在函数返回返回值前才执行某些语句。defer 与 return之间执行顺序是： 先为返回值赋值，再执行defer，最后返回返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    function1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;In function1 at the top\n&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> function2()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;In function1 at the bottom!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">function2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;function2: Deferred until the end of the calling function!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print Results</span></span><br><span class="line"><span class="comment">// In Function1 at the top</span></span><br><span class="line"><span class="comment">// In Function1 at the bottom!</span></span><br><span class="line"><span class="comment">// Function2: Deferred until the end of the calling function!</span></span><br></pre></td></tr></table></figure><p>当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）</p><p>这样我们就能通过defer关键字实现代码追踪，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">trace</span><span class="params">(s <span class="type">string</span>)</span></span>   &#123; fmt.Println(<span class="string">&quot;entering:&quot;</span>, s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">untrace</span><span class="params">(s <span class="type">string</span>)</span></span> &#123; fmt.Println(<span class="string">&quot;leaving:&quot;</span>, s) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">    trace(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> untrace(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;in a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    trace(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> untrace(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;in b&quot;</span>)</span><br><span class="line">    a()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    b()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>详情见 <a href="https://learnku.com/docs/the-way-to-go/built-in-function/3603">内置函数</a></p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>基本与C语言一致。Go语言中允许相互调用的递归函数，这些函数的声明顺序是随意的。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>这里放个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// make an Add2 function, give it a name p2, and call it:</span></span><br><span class="line">    p2 := Add2()</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Call Add2 for 3 gives: %v\n&quot;</span>, p2(<span class="number">3</span>))</span><br><span class="line">    <span class="comment">// make a special Adder function, a gets value 2:</span></span><br><span class="line">    TwoAdder := Adder(<span class="number">2</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;The result is: %v\n&quot;</span>, TwoAdder(<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add2</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b + <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Adder</span><span class="params">(a <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><h4 id="数组声明格式"><a href="#数组声明格式" class="headerlink" title="数组声明格式"></a>数组声明格式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier [<span class="built_in">len</span>]<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>像让数组接收任意类型的元素需要使用空接口作为类型</p><p>Go 中数组是值类型（不是指针），故可通过<code>new()</code>创建，如<code>new([5]int)</code>。</p><p>通过<code>var</code>和<code>new()</code>分别创建的数组arr1和arr2的区别是:</p><ul><li>arr1类型是*[5]int</li><li>arr2类型是[5]int</li></ul><h4 id="数组常量"><a href="#数组常量" class="headerlink" title="数组常量"></a>数组常量</h4><p>有三种形式：</p><ul><li><code>[5]int&#123;1,2,3,5,6&#125;</code></li><li><code>[...]int&#123;1,2,3,4,6&#125;</code></li><li><code>[5]int&#123;3: 4, 5: 6&#125;</code></li></ul><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p><code>[4][4]int</code></p><h4 id="数组传递给函数"><a href="#数组传递给函数" class="headerlink" title="数组传递给函数"></a>数组传递给函数</h4><p><code>func demo(a *[3]int)&#123;&#125;</code></p><h4 id="数组相等"><a href="#数组相等" class="headerlink" title="数组相等"></a>数组相等</h4><p>数组相等判断规则：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v1 := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;</span><br><span class="line">v2 := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;</span><br><span class="line">v3 := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Python&quot;</span>&#125;</span><br><span class="line">v4 := [<span class="number">3</span>]<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;Python&quot;</span>&#125;</span><br><span class="line">v5 := []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;</span><br><span class="line">v6 := []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(v1 == v2) <span class="comment">// true</span></span><br><span class="line">fmt.Println(v1 == v3) <span class="comment">// false 元素顺序不同</span></span><br><span class="line">fmt.Println(v1 == v4) <span class="comment">// false 元素个数不同</span></span><br><span class="line"><span class="comment">// fmt.Println(v1 == v5) mismatch types: [3]string and []string</span></span><br><span class="line"><span class="comment">// fmt.Println(v5 == v6) slice can only be compared with nil</span></span><br><span class="line"><span class="comment">// fmt.Println(v3 == v5) mismatch types: [3]string and []string</span></span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><blockquote><p>切片（slice）是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型（因此更类似于 C&#x2F;C++ 中的数组类型，或者 Python 中的 list 类型）。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Equal Expression</span></span><br><span class="line">slice[:] == slice</span><br><span class="line">slice[:n] == slice[<span class="number">0</span>:n]</span><br><span class="line">slice[n:] == slice[n:<span class="built_in">len</span>(slice)]</span><br></pre></td></tr></table></figure><h4 id="cap-–数组容量"><a href="#cap-–数组容量" class="headerlink" title="cap() –数组容量"></a>cap() –数组容量</h4><p>切片是长度可变的数组， <code>0 &lt;= len(s) &lt;= cap(s)</code>，其中<code>cap()</code>用于返回s切片的容量。多个相关的切片是共享数据的。</p><h4 id="切片传递给函数"><a href="#切片传递给函数" class="headerlink" title="切片传递给函数"></a>切片传递给函数</h4><p><code>func demo(a []int)&#123;&#125;</code></p><h4 id="make-创建切片"><a href="#make-创建切片" class="headerlink" title="make() 创建切片"></a>make() 创建切片</h4><p><code>var slice []type = make([]type, len, [cap])</code></p><p>new和make的区别：</p><ul><li>new是分配新的空间，返回的是指针</li><li>make是返回初始值，只使用于数组，map和channel</li></ul><h4 id="bytes-包"><a href="#bytes-包" class="headerlink" title="bytes 包"></a>bytes 包</h4><p>提供操作<code>[]byte</code>类型方法的包</p><h4 id="for-range"><a href="#for-range" class="headerlink" title="for-range"></a>for-range</h4><p>for-range句式用于遍历slice，其中ix为索引，value为索引值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ix, value := <span class="keyword">range</span> slice1 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复制与追加"><a href="#复制与追加" class="headerlink" title="复制与追加"></a>复制与追加</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">slice1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">slice2 := []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">n := <span class="built_in">copy</span>(slice1, slice2)</span><br><span class="line">fmt.Print(n, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">fmt.Print(slice1)</span><br><span class="line"></span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Print(slice2)</span><br></pre></td></tr></table></figure><h4 id="sort-包"><a href="#sort-包" class="headerlink" title="sort 包"></a>sort 包</h4><p>Go提供了sort包来实现各种切片的排序，如<code>sort.Ints(a []int)</code>, <code>sort.Strings(s string)</code></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="Map-声明格式"><a href="#Map-声明格式" class="headerlink" title="Map 声明格式"></a>Map 声明格式</h3><p>Map的声明格式为<code>var m map[keytype]valuetype</code></p><p>keytype 只能为简单类型如<code>int</code>,<code>string</code>, <code>float</code>等，切片和结构不能作为keytype,未初始化的值为<code>nil</code>。</p><p>用<code>make()</code>初始化map变量，而不是用<code>new()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mf := <span class="keyword">map</span>[<span class="type">int</span>]<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span>&#123;</span><br><span class="line">        <span class="number">1</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</span><br><span class="line">        <span class="number">2</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">20</span> &#125;,</span><br><span class="line">        <span class="number">5</span>: <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">50</span> &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(mf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查键和删键"><a href="#查键和删键" class="headerlink" title="查键和删键"></a>查键和删键</h3><p>用<code>val, isPresent = m[&quot;key&quot;]</code>中的<code>isPresent</code>可以判断键值<code>key</code>是否存在。</p><p>用<code>delete(m, key)</code>可以删键，且key不存在也不会报错</p><h3 id="Map与for-range"><a href="#Map与for-range" class="headerlink" title="Map与for-range"></a>Map与for-range</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>如<code>fmt</code>,<code>os</code>常用功能的150+内置包称作标准库。常见标准库看<a href="https://learnku.com/docs/the-way-to-go/overview-of-the-91-standard-library/3626">这里</a></p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h3><ul><li><p>有<code>Match</code>方法：<code>ok, _ := regexp.Match(pat, searchIn)</code></p></li><li><p>同样有<code>MatchString</code>方法</p></li><li><p>创建正则对象：<code>re, _ = regexp.Compile(pat)</code></p></li><li><p>替换字符串： <code>str := re.ReplaceAllString(pat, new)</code></p></li><li><p>按函数替换字符串： <code>str := re.ReplaceAllStringFunc(pat, f)</code></p></li></ul><h3 id="锁和sync"><a href="#锁和sync" class="headerlink" title="锁和sync"></a>锁和sync</h3><p>为避免同一变量同时被不同线程访问修改造成资源竞争，我们需要对变量上一个线程锁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> mu sync.Mutex</span><br><span class="line">    <span class="keyword">var</span> count <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++ &#123;</span><br><span class="line">        mu.Lock() <span class="comment">// 加锁，保护count</span></span><br><span class="line">        count++</span><br><span class="line">        mu.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有<code>RWMutex</code>锁，使用<code>RLock()</code>来允许同时有多个线程对变量进行读操作，只有一个线程进行写操作</p><h3 id="精密计算big包"><a href="#精密计算big包" class="headerlink" title="精密计算big包"></a>精密计算big包</h3><p>Go提供了<code>big</code>包来进行精确计算。</p><ul><li><code>big.NewInt(n)</code></li><li><code>big.NewRat(N, D)</code> N为分子，D为分母</li></ul><h3 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h3><p>包文件名应由短小的不含<code>_</code>的单词组成</p><p>想使用包得先通过<code>import</code>关键字导入包： <code>import &quot;relative path or URL&quot;</code></p><ul><li><p><code>import &quot;package&quot;</code></p><p>使用包的全局变量和函数需通过<code>包名.val</code>和<code>包名.func</code></p></li><li><p><code>import . &quot;package&quot;</code></p><p>可直接使用包的全局变量和函数</p></li><li><p><code>import _ &quot;package&quot;</code></p><p>只导入包的副作用，即调用init函数和初始化全局变量</p></li><li><p><code>import alias &quot;package&quot;</code></p><p>导入包并使用<code>alias</code>别名</p></li></ul><p>格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pack_demo包</span></span><br><span class="line"><span class="keyword">package</span> packdemo</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pi <span class="type">float32</span> = <span class="number">3.14514</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloWorld</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主函数入口</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;./pack_demo&quot;</span> <span class="comment">// 同一路径下</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(packdemo.pi)</span><br><span class="line">    packdemo.HelloWorld()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构与方法"><a href="#结构与方法" class="headerlink" title="结构与方法"></a>结构与方法</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> identifier <span class="keyword">struct</span> &#123;</span><br><span class="line">    field1 type1</span><br><span class="line">    field2 type2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明结构体变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s T</span><br><span class="line">s.a = <span class="number">5</span></span><br><span class="line">s.b = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use new()</span></span><br><span class="line"><span class="keyword">var</span> t *T</span><br><span class="line">t = <span class="built_in">new</span>(T)</span><br></pre></td></tr></table></figure><p>值得注意的是，Go中无论是结构体变量还算结构体指针都通过<code>.</code>选择器符来引用结构体字段。</p><p>更简短的初始化结构体实例为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo := &amp;struct1&#123;<span class="number">10</span>, <span class="number">1.5</span>, <span class="string">&quot;no&quot;</span>&#125; <span class="comment">// 本质是使用new()</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">var</span> demo struct1</span><br><span class="line">demo = struct1&#123;<span class="number">10</span>, <span class="number">1.5</span>, <span class="string">&quot;no&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>Go中结构体的内存分布是连续块存在的。</p><p>结构体中的转化只存在于有相同底层类型的结构体间，而且得通过显式转化。</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewFile</span><span class="params">(fd <span class="type">int</span>, name <span class="type">string</span>)</span></span> *File &#123;</span><br><span class="line">    <span class="keyword">if</span> fd &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;File&#123;fd, name&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用工厂方法创建结构体实例</span></span><br><span class="line">f := NewFile(<span class="number">10</span>, <span class="string">&quot;./test.txt&quot;</span>) </span><br></pre></td></tr></table></figure><p>在Go中，标识符以大写字符开头的能被外部包的代码所引用，否则对外部包不可见。通过这个能使一个结构体设置为私有类型，只能通过工厂方法创建和操作结构体。</p><p>通过<code>make()</code>创建结构体会报错。</p><h3 id="结构体中的标签"><a href="#结构体中的标签" class="headerlink" title="结构体中的标签"></a>结构体中的标签</h3><p>用于自省类型、文档标记等。可通过<code>reflect</code>包来获取。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TagType <span class="keyword">struct</span> &#123; <span class="comment">// tags</span></span><br><span class="line">    field1 <span class="type">bool</span>   <span class="string">&quot;An important answer&quot;</span></span><br><span class="line">    field2 <span class="type">string</span> <span class="string">&quot;The name of the thing&quot;</span></span><br><span class="line">    field3 <span class="type">int</span>    <span class="string">&quot;How much there are&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    tt := TagType&#123;<span class="literal">true</span>, <span class="string">&quot;Barak Obama&quot;</span>, <span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        refTag(tt, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">refTag</span><span class="params">(tt TagType, ix <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    ttType := reflect.TypeOf(tt)</span><br><span class="line">    ixField := ttType.Field(ix)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, ixField.Tag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名字段和内嵌结构体"><a href="#匿名字段和内嵌结构体" class="headerlink" title="匿名字段和内嵌结构体"></a>匿名字段和内嵌结构体</h3><p>匿名字段可用于模拟结构体的继承，即通过内嵌匿名结构体来模拟。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> innerS <span class="keyword">struct</span> &#123;</span><br><span class="line">    in1 <span class="type">int</span></span><br><span class="line">    in2 <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> outerS <span class="keyword">struct</span> &#123;</span><br><span class="line">    b    <span class="type">int</span></span><br><span class="line">    c    <span class="type">float32</span></span><br><span class="line">    <span class="type">int</span>  <span class="comment">// anonymous field</span></span><br><span class="line">    innerS <span class="comment">//anonymous field</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    outer := <span class="built_in">new</span>(outerS)</span><br><span class="line">    outer.b = <span class="number">6</span></span><br><span class="line">    outer.c = <span class="number">7.5</span></span><br><span class="line">    outer.<span class="type">int</span> = <span class="number">60</span></span><br><span class="line">    outer.in1 = <span class="number">5</span></span><br><span class="line">    outer.in2 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">&quot;outer.b is: %d\n&quot;</span>, outer.b)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;outer.c is: %f\n&quot;</span>, outer.c)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;outer.int is: %d\n&quot;</span>, outer.<span class="type">int</span>)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;outer.in1 is: %d\n&quot;</span>, outer.in1)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;outer.in2 is: %d\n&quot;</span>, outer.in2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用结构体字面量</span></span><br><span class="line">    outer2 := outerS&#123;<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">60</span>, innerS&#123;<span class="number">5</span>, <span class="number">10</span>&#125;&#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;outer2 is:&quot;</span>, outer2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名冲突时：</p><ul><li>外层名字会覆盖内层名字</li><li>同一级别出现两次相同的名字会报错</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Go 中方法是作用在receiver上的函数。定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recv receiver_type)</span></span> methodName(parameter_list) (return_value_list) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>无论recv是实例还是指针，都通过<code>object.funcName()</code>调用方法。</p><p>不需要recv的值可以用<code>_</code>代替：<code>func (_ receiver_type) methodName(parameter_list) (return_value_list) &#123; ... &#125;</code></p><p>值得注意的是类型和作用其上的方法必需在同一包中，这也是为什么不能在int,float等类型上定义方法。</p><p>结构体内嵌和自己在同一个包中的结构体时，可以彼此访问对方所有的字段和方法。</p><h3 id="类型的String-方法"><a href="#类型的String-方法" class="headerlink" title="类型的String()方法"></a>类型的String()方法</h3><p>为结构体定义<code>String()</code>方法可以使<code>fmt.Printf()</code>的%v输出或<code>fmt.Print()</code>和<code>fmt.Println()</code>的默认输出</p><h3 id="垃圾回收和SetFinalizer"><a href="#垃圾回收和SetFinalizer" class="headerlink" title="垃圾回收和SetFinalizer"></a>垃圾回收和SetFinalizer</h3><p><code>runtime.GC()</code>可以显式调用垃圾收集器</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><ul><li><p>类型不需要显式声明它实现了某个接口：接口被隐式地实现。多个类型可以实现同一个接口。</p></li><li><p>实现某个接口的类型（除了实现接口方法外）可以有其他的方法。</p></li><li><p>一个类型可以实现多个接口。</p></li><li><p>接口类型可以包含一个实例的引用， 该实例的类型实现了此接口（接口是动态类型）</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> stockPosition <span class="keyword">struct</span> &#123;</span><br><span class="line">    ticker     <span class="type">string</span></span><br><span class="line">    sharePrice <span class="type">float32</span></span><br><span class="line">    count      <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* method to determine the value of a stock position */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s stockPosition)</span></span> getValue() <span class="type">float32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.sharePrice * s.count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> car <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="built_in">make</span>  <span class="type">string</span></span><br><span class="line">    model <span class="type">string</span></span><br><span class="line">    price <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* method to determine the value of a car */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c car)</span></span> getValue() <span class="type">float32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* contract that defines different things that have value */</span></span><br><span class="line"><span class="keyword">type</span> valuable <span class="keyword">interface</span> &#123;</span><br><span class="line">    getValue() <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showValue</span><span class="params">(asset valuable)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;Value of the asset is %f\n&quot;</span>, asset.getValue())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> o valuable = stockPosition&#123;<span class="string">&quot;GOOG&quot;</span>, <span class="number">577.20</span>, <span class="number">4</span>&#125;</span><br><span class="line">    showValue(o)</span><br><span class="line">    o = car&#123;<span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;M3&quot;</span>, <span class="number">66500</span>&#125;</span><br><span class="line">    showValue(o)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>检查断言的方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// varI 是接口类型变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uncheck type</span></span><br><span class="line">v := varI.(T) <span class="comment">// 若varI含类型T的值，则v为varI转化为T的值，否则v为T类的零值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">if</span> v, ok := varI.(T); ok &#123;</span><br><span class="line">    Process(v)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用Go中特有的<code>type-switch</code>语句来判断：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> t := varI.(<span class="keyword">type</span>) &#123; <span class="comment">// 这里的type画重点！！</span></span><br><span class="line">    <span class="keyword">case</span> type1:</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">case</span> type2: </span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体类型是值类型还算引用类型取决于该类的接口实现使用的接收者类型（雾</p><p>判断某个值是否实现某个接口也可以用<code>varT.(I)</code>的方法来判断，这里不多赘述</p><p>Go 语言规范定义了接口方法集的调用规则：</p><ul><li>类型 *T 的可调用方法集包含接受者为 *T 或 T 的所有方法集</li><li>类型 T 的可调用方法集包含接受者为 T 的所有方法</li><li>类型 T 的可调用方法集不包含接受者为 *T 的方法</li></ul><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>任何类型都实现了空接口，所以可以这样做：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Any <span class="keyword">interface</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> any Any</span><br><span class="line">any = <span class="string">&quot;ABC&quot;</span></span><br><span class="line">fmt.Println(any)</span><br><span class="line">any = <span class="number">15</span></span><br><span class="line">fmt.Println(any)</span><br><span class="line">any = <span class="number">1.05</span></span><br><span class="line">fmt.Println(any)</span><br><span class="line">any = <span class="built_in">new</span>(Person&#123;name: <span class="string">&quot;Bob&quot;</span>, age: <span class="number">100</span>&#125;)</span><br><span class="line">fmt.Println(any.name, <span class="string">&quot; &quot;</span>, any.age)</span><br></pre></td></tr></table></figure><p>将切片数据复制到空接口切片只能通过<code>for-range</code>语句显式赋值</p><h2 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h2><h3 id="读取用户输入"><a href="#读取用户输入" class="headerlink" title="读取用户输入"></a>读取用户输入</h3><ul><li><code>fmt.Scanln(&amp;str1, &amp;str2, ...)</code>从标准输入依次读取以空格分割的字符串，直到遇到<code>\n</code></li><li><code>fmt.Scanf(format, &amp;str1)</code></li><li><code>fmt.Sscan(str, &amp;str1, &amp;str2, ...)</code> 从字符串读取</li></ul><p>还能用bufio包提供的缓冲读取来实现读取输入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">)</span><br><span class="line">inputReader := bufio.NewReader(os.Stdin)</span><br><span class="line">input, err := inputReader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>通过<code>os</code>包的<code>Open()</code>函数能得到文件的句柄</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import (&quot;os&quot;, &quot;bufio&quot;)</span></span><br><span class="line">inputFile, inputError := os.Open(<span class="string">&quot;path/to/file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> inputError != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// Report FileNotFound Error</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Remember close the file in the end!!!</span></span><br><span class="line"><span class="keyword">defer</span> inputFile.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read the file</span></span><br><span class="line">inputReader := bufio.NewReader(inputFile)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// Infinite loop until EOF</span></span><br><span class="line">    inputStr, readerError := inputReader.ReaderString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> readerError == io.EOF &#123;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用<code>io/ioutil</code>将整个文件内容读到一个字符串（<code>[]byte</code>）中,</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import (&quot;io/ioutil&quot;)</span></span><br><span class="line"></span><br><span class="line">inputFile, err := ioutil.ReadFiler(<span class="string">&quot;path/to/file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// Error Handling</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ioutil.WriteFile(<span class="string">&quot;path/to/file&quot;</span>, buf, max_length) <span class="comment">// 可命名文件名</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// Error Handling</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带缓冲的读取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">n, err := inputReader.Read(buf) <span class="comment">// n为读到的字节数</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;<span class="keyword">break</span>&#125;</span><br></pre></td></tr></table></figure><p><code>Fscanln</code>读取文件数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inputFile --- file handler</span></span><br><span class="line">_, err := fmt.Fscanln(file, &amp;v1, &amp;v2, &amp;v3)</span><br></pre></td></tr></table></figure><p>切片读文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n是字符数， f是文件句柄， buf是读取到文件内容的切片</span></span><br><span class="line">n, err := f.Read(buf[:])</span><br></pre></td></tr></table></figure><p>写文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(<span class="string">&quot;data.txt&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class="number">1024</span>)</span><br><span class="line"><span class="keyword">if</span> outputError != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;An error occurred with file opening or creation\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> outputFile.Close()</span><br><span class="line"></span><br><span class="line">outputWriter := bufio.NewWriter(outputFile)</span><br><span class="line">outputString := <span class="string">&quot;hello world!\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ &#123;</span><br><span class="line">    outputWriter.WriteString(outputString)</span><br><span class="line">&#125;</span><br><span class="line">outputWriter.Flush() <span class="comment">// 重点！！！</span></span><br></pre></td></tr></table></figure><p>使用<code>io</code>包的<code>Copy(dst, src)</code>函数可以实现文件的拷贝，其中dst和src是文件句柄。</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>通过<code>os.Args</code>可以获取命令行参数的切片(<code>os.Args[0]</code>是程序名)</p><p><code>flag</code>包也能处理命令行参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">    <span class="string">&quot;flag&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag.Bool(flag, bool, demonstration)</span></span><br><span class="line"><span class="keyword">var</span> isN *<span class="type">bool</span> = flag.Bool(<span class="string">&quot;n&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;default demonstrations&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; flag.NArgs(); i++ &#123;</span><br><span class="line">    fmt.Println(flag.Arg(i))</span><br><span class="line">    <span class="keyword">if</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON数据"><a href="#JSON数据" class="headerlink" title="JSON数据"></a>JSON数据</h3><p>Go中用<code>encoding/json</code>包来处理json数据</p><p>Go结构体 &#x3D;&gt; JSON</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Adr <span class="keyword">struct</span> &#123;</span><br><span class="line">    Country  <span class="type">string</span></span><br><span class="line">    Province <span class="type">string</span></span><br><span class="line">    Code     <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dic <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name    <span class="type">string</span></span><br><span class="line">    Age     <span class="type">int</span></span><br><span class="line">    Address *Adr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShowJson</span><span class="params">(demo *Dic)</span></span> &#123;</span><br><span class="line">    json, _ := json.Marshal(demo) <span class="comment">// 序列化</span></span><br><span class="line">    fmt.Println(json)</span><br><span class="line">    <span class="keyword">var</span> res *Dic</span><br><span class="line">    _ := json.Unmarshal(json, res)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    demo := &amp;Dic&#123;Name: <span class="string">&quot;Dopa&quot;</span>, Age: <span class="number">18</span>, Address: &amp;Adr&#123;<span class="string">&quot;China&quot;</span>, <span class="string">&quot;Fujian&quot;</span>, <span class="number">200</span>&#125;&#125;</span><br><span class="line">    ShowJson(demo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;&quot;Name&quot;:&quot;Dopa&quot;,&quot;Age&quot;:18,&quot;Address&quot;:&#123;&quot;Country&quot;:&quot;China&quot;,&quot;Province&quot;:&quot;Fujian&quot;,&quot;Code&quot;:200&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>Go中与JSON对应的数据结构：</p><ul><li>bool 对应 JSON 的 booleans</li><li>float64 对应 JSON 的 numbers</li><li>string 对应 JSON 的 strings</li><li>nil 对应 JSON 的 null</li></ul><p>编码Map对象需要是map[string] T类型</p><p>Channel,复杂类型不能被编码</p><p>map[string]interface{}和[]interface{}能解码任何JSON对象和数组</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h3 id="定义错误"><a href="#定义错误" class="headerlink" title="定义错误"></a>定义错误</h3><p>Go中提供了<code>errors</code>包来定义错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> NotFoundErr <span class="type">error</span> = errors.New(<span class="string">&quot;File not found&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(NotFoundErr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用<code>fmt.Errorf()</code>创建错误对象</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err := fmt.Errorf(<span class="string">&quot;usage: %s&quot;</span>, something)</span><br></pre></td></tr></table></figure><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>Go中用<code>panic</code>产生运行时异常</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line">    file, err := os.Open(<span class="string">&quot;error.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">&quot;Fail to Open File&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从panic恢复"><a href="#从panic恢复" class="headerlink" title="从panic恢复"></a>从panic恢复</h3><p>在多次嵌套调用的函数中触发panic使defer 语句保证执行并且控制权交给panic调用的函数。栈会被展开直到defer语句中的recover()被调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">protect</span><span class="params">(g <span class="keyword">func</span>()</span></span>) &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;run time err : %v&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    log.Println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    g()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们就能用闭包处理错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;error&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertInt64ToInt</span><span class="params">(input <span class="type">int64</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> math.MinInt32 &lt;= input &amp;&amp; input &lt;= math.MaxInt32 &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">int</span>(input)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;%d is out of the int32 range&quot;</span>, input))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IntFromInt64</span><span class="params">(input <span class="type">int64</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> err <span class="type">error</span> = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> r := <span class="built_in">recover</span>(); r != <span class="literal">nil</span> &#123;</span><br><span class="line">            err = fmt.Errorf(<span class="string">&quot;%v&quot;</span>, r)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ConvertInt64ToInt(input), err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试和基准测试"><a href="#单元测试和基准测试" class="headerlink" title="单元测试和基准测试"></a>单元测试和基准测试</h3><p>测试代码的包文件名满足这种形式<code>*_test.go</code>，且必需导入<code>testing</code>包，写一些Test*开头的全局函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestAbcde</span><span class="params">(t *testing.T)</span></span></span><br></pre></td></tr></table></figure><p>一些二通知测试失败的函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> Fail() <span class="comment">// 标记测试函数为失败，然后继续执行（剩下的测试）。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> FailNow() <span class="comment">// 标记测试函数为失败并中止执行；文件中别的测试也被略过，继续执行下一个文件。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> Log(args ...<span class="keyword">interface</span>&#123;&#125;) <span class="comment">// args 被用默认的格式格式化并打印到错误日志中。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span></span> Fatal(args ...<span class="keyword">interface</span>&#123;&#125;) <span class="comment">//     结合 先执行Log，然后执行FailNow的效果。</span></span><br></pre></td></tr></table></figure><p>使用<code>go test</code>来编译测试程序，并执行所有Test*的函数，所有函数通过会打印PASS</p><p>做简单的基准测试需要测试代码中包含Benchmark<em>的函数并接收一个</em>testing.B类型的参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkReverse</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令 go test –test.bench&#x3D;.* 会运行所有的基准测试函数；代码中的函数会被调用 N 次（N 是非常大的数，如 N &#x3D; 1000000），并展示 N 的值和函数执行的平均时间，单位为 ns（纳秒，ns&#x2F;op）。</p><h3 id="表驱动测试"><a href="#表驱动测试" class="headerlink" title="表驱动测试"></a>表驱动测试</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tests = []<span class="keyword">struct</span>&#123;   <span class="comment">// Test table</span></span><br><span class="line">    in  <span class="type">string</span></span><br><span class="line">    out <span class="type">string</span></span><br><span class="line"></span><br><span class="line">&#125;&#123;</span><br><span class="line">    &#123;“in1”, “exp1”&#125;,</span><br><span class="line">    &#123;“in2”, “exp2”&#125;,</span><br><span class="line">    &#123;“in3”, “exp3”&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFunction</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        s := FuncToBeTested(tt.in)</span><br><span class="line">        <span class="keyword">if</span> s != tt.out &#123;</span><br><span class="line">            t.Errorf(“%d. %q =&gt; %q, wanted: %q”, i, tt.in, s, tt.out)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="协程与通道"><a href="#协程与通道" class="headerlink" title="协程与通道"></a>协程与通道</h2><h3 id="并发、并行和协程"><a href="#并发、并行和协程" class="headerlink" title="并发、并行和协程"></a>并发、并行和协程</h3><ol><li>一个应用程序是运行在机器上的一个进程，进程是一个运行在自己内存地址空间里的独立执行体。</li><li>一个进程由一个或多个操作系统线程组成，线程其实是共享同一个内存地址空间的一起工作的执行体。</li><li>协程运行在线程之上，协程并没有增加线程数量，只是在线程的基础之上通过分时复用的方式运行多个协程。</li><li>Go使用<code>go</code>关键字就能开启协程，要注意若主线程先结束，未结束的协程也会中断。</li></ol><h3 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h3><p>用GOMAXPROCS 为一个大于默认值 1 的数值来允许运行时支持使用多于 1 个的操作系统线程，否则所有的协程都会共享同一个线程。</p><p>协程的数量 &gt; 1 + GOMAXPROCS &gt; 1。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtime.GOMAXPROCS(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>channel类型本质是队列。声明格式为<code>var identifier chan datatype</code>，之后必需实例化它：<code>identifer = make(chan datatype)</code></p><p>用<code>var identifier &lt;- chan datatype</code>声明只读通道， <code>var identifier chan &lt;- datatype</code>声明只写通道。</p><p>通道操作符为<code>&lt;-</code>:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">ch &lt;- <span class="number">100</span> <span class="comment">// 向ch写入100</span></span><br><span class="line">fmt.Println(&lt;- ch) <span class="comment">// 100</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(ch)) <span class="comment">// 0; 100被取出</span></span><br></pre></td></tr></table></figure><blockquote><p>通道阻塞： 当通道数据已满且没有接收者读出数据&#x2F;通道已空仍有接收者尝试读出数据，就会触发通道阻塞，直到数据被读出&#x2F;通道读入新数据</p></blockquote><p>遍历channel:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="built_in">close</span>(ch) <span class="comment">// 阻塞管道后才能遍历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一 自动检测管道是否被阻塞</span></span><br><span class="line"><span class="keyword">for</span> val := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    dosomethings()   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法二 用ok判断管道是否被阻塞</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    val, ok := &lt;- ch</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    dosomethings()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误的方法！</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ch); i++ &#123;</span><br><span class="line">    <span class="comment">// len(ch)会变化！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用select语句切换协程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> u:= &lt;- ch1:</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">case</span> v:= &lt;- ch2:</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// no value ready to be received</span></span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果都阻塞了，会等待直到其中一个可以处理</span></span><br><span class="line"><span class="comment">// 如果多个可以处理，随机选择一个</span></span><br><span class="line"><span class="comment">// 如果没有通道操作可以处理并且写了 default 语句，它就会执行：default 永远是可运行的（这就是准备好了，可以执行）。</span></span><br></pre></td></tr></table></figure><h3 id="sync包的WaitGroup"><a href="#sync包的WaitGroup" class="headerlink" title="sync包的WaitGroup"></a>sync包的WaitGroup</h3><p>WaitGroup 用于创建任务队列，其中提供了三个方法<code>WaitGroup.Add(count)</code>、<code>WaitGroup.Done()</code>、<code>WaitGroup.Wait()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> waitGroup sync.WaitGroup</span><br><span class="line">    waitGroup.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> waitGroup.Done()</span><br><span class="line">        doSomethings()</span><br><span class="line">    &#125;()</span><br><span class="line">    waitGroup.Wait()</span><br><span class="line">    fmt.Println(<span class="string">&quot;main end!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些 Golang 的内置包</title>
      <link href="/2024/01/20/%E4%B8%80%E4%BA%9BGolang%20%E7%9A%84%E5%86%85%E7%BD%AE%E5%8C%85/"/>
      <url>/2024/01/20/%E4%B8%80%E4%BA%9BGolang%20%E7%9A%84%E5%86%85%E7%BD%AE%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote><p>Go中每个<strong>接口</strong>变量都对应一个pair(value, concrete type), value是这个变量的值，而concrete type是这个变量在runtime系统中看见的类型。反射就是检查<strong>接口</strong>变量内部pair的机制</p></blockquote><h3 id="Type-amp-Value"><a href="#Type-amp-Value" class="headerlink" title="Type &amp; Value"></a>Type &amp; Value</h3><p>reflect包提供了Type和Value两种核心类型，代表Go中的变量值和变量类型。可通过TypeOf和ValueOf方法获取变量的Type和Value。</p><p>reflect的TyepOf和ValueOf函数签名如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TypeOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Type</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ValueOf</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> Value</span><br></pre></td></tr></table></figure><p>这两函数先将传进来的变量转化为接口，再调用反射机制来实现对变量类型和值的查看</p><p>Type和Value也提供了一些方法：</p><ul><li>Type<ul><li>Kind() 对应的底层类型,返回Kind(本质是uint)</li><li>Elem() 返回元素的类型Type,参数必须是array,chan,map,pointer,slice等</li></ul></li><li>Value<ul><li>Kind()</li><li>Elem() 接口或指针对应的值</li><li>Type()</li><li>Interface() 以空接口的形式返回Value的值</li></ul></li></ul><h3 id="Field-amp-Method"><a href="#Field-amp-Method" class="headerlink" title="Field &amp; Method"></a>Field &amp; Method</h3><p>对于struct变量，可以通过NumField和NumMethod来遍历该结构体的字段和方法</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AnoStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Type <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ano := AnoStruct&#123;<span class="string">&quot;Ano&quot;</span>, <span class="string">&quot;AnoType&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">anoType := reflect.TypeOf(Ano)</span><br><span class="line">anoValue := reflect.ValueOf(Ano)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; anoType.NumField(); i++ &#123;</span><br><span class="line">    field := anoType.Field(i)</span><br><span class="line">    value := anoValue.Field(i)</span><br><span class="line">    fmt.Println(field.Name, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CanSet-amp-Setxx"><a href="#CanSet-amp-Setxx" class="headerlink" title="CanSet &amp; Setxx"></a>CanSet &amp; Setxx</h3><p>可以通过反射修改原变量</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须传入指针配合Elem()方法来修改原变量的值</span></span><br><span class="line">anoValue := reflect.ValueOf(&amp;Ano).Elem()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> anoValue.CanSet() &#123;</span><br><span class="line">    anoValue.SetInt(<span class="number">100</span>) <span class="comment">// 还有SetInt/SetFloat/SetString等方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Call"><a href="#Call" class="headerlink" title="Call"></a>Call</h3><p>可通过反射调用函数</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v* AnoStruct)</span></span> DoSomething(val <span class="type">string</span>) &#123;</span><br><span class="line">    fmt.Println(val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">anoFunc := anoValue.MethodByName(<span class="string">&quot;DoSomething&quot;</span>)</span><br><span class="line">args = []reflect.Value&#123;reflect.ValueOf(<span class="string">&quot;Hello Reflect!&quot;</span>)&#125;</span><br><span class="line">anoFunc.Call(args)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h2><p>掌握Sort包的一些函数可以方便刷lc（不是</p><h3 id="sort-Interface"><a href="#sort-Interface" class="headerlink" title="sort.Interface"></a>sort.Interface</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sort</span><br><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Len() <span class="type">int</span>            <span class="comment">// 获取元素数量</span></span><br><span class="line">    Less(i, j <span class="type">int</span>) <span class="type">bool</span> <span class="comment">// i，j是序列元素的指数。</span></span><br><span class="line">    Swap(i, j <span class="type">int</span>)        <span class="comment">// 交换元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort-Sort"><a href="#sort-Sort" class="headerlink" title="sort.Sort"></a>sort.Sort</h3><p><code>sort.Sort</code>函数可对一个数组类型变量中的元素进行排序，且该数组类型变量需要实现<code>sort.Interface</code>接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo/sort/Sort</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PersonsByAge []Person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Person)</span></span>Len() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制升序降序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Person)</span></span>Less(i, j <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> demo[i].Age &lt; demo[j].Age <span class="comment">// 升序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this Person)</span></span>Swap(i, j <span class="type">int</span>) &#123;</span><br><span class="line">    this[i], this[j] = this[j], this[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    demo := []Person&#123;</span><br><span class="line">        &#123;<span class="string">&quot;Jame&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">34</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Sort(PersonsByAge(demo))</span><br><span class="line">    fmt.Println(demo)</span><br><span class="line">    <span class="comment">// &#123;&quot;Bob&quot;, 22&#125;,&#123;&quot;Alice&quot;, 34&#125;, &#123;&quot;Jame&quot;, 55&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort-Slice"><a href="#sort-Slice" class="headerlink" title="sort.Slice"></a>sort.Slice</h3><p><code>sort.Sort()</code>的使用方法过于麻烦，相比下使用<code>sort.Slice()</code>方法能更轻松实现数组的自定义排序。其第一个参数就是待排序数组，第二个参数就是指明排序方法的<code>less</code>函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo/sort/Slice</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    demo := []Person&#123;</span><br><span class="line">        &#123;<span class="string">&quot;Jame&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;Alice&quot;</span>, <span class="number">34</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort.Slice(demo, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> demo[i].Age &lt; demo[j].Age</span><br><span class="line">    &#125;)</span><br><span class="line">    fmt.Println(demo)</span><br><span class="line">    <span class="comment">// &#123;&quot;Bob&quot;, 22&#125;,&#123;&quot;Alice&quot;, 34&#125;, &#123;&quot;Jame&quot;, 55&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort-Ints-x2F-sort-Float64s"><a href="#sort-Ints-x2F-sort-Float64s" class="headerlink" title="sort.Ints &#x2F; sort.Float64s"></a>sort.Ints &#x2F; sort.Float64s</h3><p>sort中有int和float数组的升序排序函数<code>sort.Ints(x []int)</code>和<code>sort.Float64(x []float64)</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo/sort/Ints</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo := []<span class="type">int</span>&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">67</span>,<span class="number">18</span>&#125;</span><br><span class="line">sort.Ints(demo)</span><br><span class="line">fmt.Println(demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sort-Search"><a href="#sort-Search" class="headerlink" title="sort.Search"></a>sort.Search</h3><p><code>sort.Search(n int, f func(i int) bool) int</code>用于返回$[0, n)$中最小的能够满足参数f的索引值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo/sort/Seach</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo := []<span class="type">int</span>&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">67</span>,<span class="number">18</span>&#125;</span><br><span class="line">    x := <span class="number">17</span></span><br><span class="line">    <span class="comment">// demo第一个大于等于x(17)的元素下标</span></span><br><span class="line">    ans := sort.Search(<span class="built_in">len</span>(data), <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> demo[i] &gt;= x </span><br><span class="line">    &#125;)</span><br><span class="line">fmt.Println(ans, demo[ans], x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sort.SearchInts(x []int, target int)</code>,<code>sort.SearchFloat64s(x []float64, target float64)</code>和<code>sort.SearchStrings(x []string, target string)</code>作用与之类似，不展开描述。</p><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><p>container下包含了三个包：<code>list</code>、<code>heap</code>和<code>ring</code>，对应数据结构中的双向链表、堆、环形链表。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>实现源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Element <span class="keyword">struct</span> &#123;</span><br><span class="line">   next, prev *Element <span class="comment">// 前后指针</span></span><br><span class="line">   list *List <span class="comment">// 所属链表</span></span><br><span class="line">   Value any <span class="comment">// 值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">   root Element <span class="comment">// 哨兵元素</span></span><br><span class="line">   <span class="built_in">len</span>  <span class="type">int</span>     <span class="comment">// 链表元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节点Element的Value的类型为空接口，故可以插入任意类型的数据。以下是<strong>List的方法</strong></p><ul><li>初始化：<ul><li><code>list.New() *List</code></li></ul></li><li>增: <ul><li><code>(s *list)PushFront(x any)</code></li><li><code>(s *list)PushBack(x any)</code></li><li><code>(s *list)PushFrontList(other *List)</code></li><li><code>(s *list)PushBackList(other *List)</code></li><li><code>(s *list)InsertAfter(v any, mark *Element)</code></li><li><code>(s *list)InsertBefore(v any, mark *Element)</code></li></ul></li><li>删<ul><li><code>(s *list)Remove(e *Element) any</code>, 返回被删除节点的值</li><li><code>(s *list)Init() *List</code>, 清空列表</li></ul></li><li>改<ul><li><code>(s *list)MoveToFront(e *Element)</code></li><li><code>(s *list)MoveToBack(e *Element)</code></li><li><code>(s *list)MoveBefore(e, mark *Element)</code></li><li><code>(s *list)MoveAfter(e, mark *Element)</code></li></ul></li><li>查<ul><li><code>(s *list)Back() *Element</code></li><li><code>(s *list)Front() *Element</code></li><li><code>(s *list)Len() int</code> O(1)</li></ul></li></ul><p>可通过<strong>Element</strong>的<code>Next() *Element</code>和<code>Prev() *Element</code>方法进行节点操作</p><h3 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h3><p>和sort包一样，heap也有一个Interface类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">    sort.Interface</span><br><span class="line">    Push(x <span class="keyword">interface</span>&#123;&#125;) <span class="comment">// 向末尾添加元素</span></span><br><span class="line">    Pop() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// 从末尾删除元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有实现该接口的类型也能用<code>container/heap</code>包提供函数构建最大堆&#x2F;最小堆（由sort.Interface的Swap函数决定）。</p><p>常用的<strong>heap包提供的函数</strong>有：</p><ul><li>初始化<ul><li><code>Init()</code>, 即buildHeap()</li></ul></li><li>增<ul><li><code>Push(h Interface, v any)</code></li></ul></li><li>删<ul><li><code>Pop(h Interface)</code></li><li><code>Remove(h Interface, i int)</code>， 删除下标为i的元素</li></ul></li><li>改<ul><li><code>Fix(h Interface, i int)</code>，若下标i处被修改，可使用Fix函数创新从i处构造堆</li></ul></li></ul><h3 id="ring"><a href="#ring" class="headerlink" title="ring"></a>ring</h3><p>实现源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Ring <span class="keyword">struct</span> &#123;</span><br><span class="line">   next, prev *Ring <span class="comment">// 前后指针</span></span><br><span class="line">   Value      any   <span class="comment">// 值，使用者自己设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ring的一些方法</p><ul><li>创建：<ul><li><code>New(i int)</code>，i为节点个数</li></ul></li><li>增：<ul><li><code>(s *Ring)Link(r *Ring) *Ring</code>, 当前环s与r拼接,使s的下个元素为r，并返回原本s的下个元素</li></ul></li><li>删：<ul><li><code>(s *Ring)Unlink(n int) *Ring</code>，删除从s.Next()开始的<code>n % s.Len()</code>个元素，返回被删除的环</li></ul></li><li>查：<ul><li><code>(s *Ring)Next() *Ring</code></li><li><code>(s *Ring)Prev() *Ring</code></li><li><code>(s *Ring)Len() int</code></li></ul></li><li>其他：<ul><li><code>(s *Ring)Do(f func(a any))</code>，对环的每个元素调用f函数</li><li><code>(s *Ring)Move(n int) *Ring</code>，s移动<code>|n|%s.Len()</code>个位置，<code>Move(1)==Next()</code>，<code>Move(-1)==Prev()</code></li></ul></li></ul><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>Golang标准库下的缓冲区，可存储字节。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">buffer := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">buffer := bytes.NewBuffer(s []<span class="type">byte</span>)</span><br><span class="line">buffer := bytes.NewBufferString(s <span class="type">string</span>)</span><br></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buffer.Write(s []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">buffer.WriteString(s <span class="type">string</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">buffer.WriteByte(b <span class="type">byte</span>) err <span class="type">error</span></span><br><span class="line">buffer.WriteRune(r <span class="type">rune</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">buffer.ReadFrom(f io.Reader) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><h3 id="读出"><a href="#读出" class="headerlink" title="读出"></a>读出</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buffer.Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line">buffer.Next(n <span class="type">int</span>) []<span class="type">byte</span></span><br><span class="line">buffer.ReadByte() (<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line">buffer.ReadBytes(delimiter <span class="type">byte</span>) (line []<span class="type">byte</span>, err <span class="type">error</span>)</span><br><span class="line">buffer.ReadString(delimiter <span class="type">byte</span>) (line <span class="type">string</span>, err <span class="type">error</span>)</span><br><span class="line">buffer.WriteTo(w io.Writer) (n <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><h2 id="Regexp"><a href="#Regexp" class="headerlink" title="Regexp"></a>Regexp</h2><p>正则表达式</p><h3 id="构建正则对象"><a href="#构建正则对象" class="headerlink" title="构建正则对象"></a>构建正则对象</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg := regexp.MustCompile(s <span class="type">string</span>) <span class="comment">// s为正则表达式</span></span><br></pre></td></tr></table></figure><h3 id="判定字符串是否符合正则表达式"><a href="#判定字符串是否符合正则表达式" class="headerlink" title="判定字符串是否符合正则表达式"></a>判定字符串是否符合正则表达式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag, err := regex.MatchString(reg <span class="type">string</span>, s <span class="type">string</span>)</span><br><span class="line">flag, err := reg.MatchString(s <span class="type">string</span>) <span class="comment">// reg为正则对象*Regexp</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grammar </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web之Http基础</title>
      <link href="/2023/08/25/Http%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/25/Http%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议。</p><p>打开浏览器，随便访问一个网站，按F12打开开发者工具，点击<strong>网络&#x2F;Network</strong>,再次刷新网页，就可以看到你向这个网站服务器发送的HTTP请求数据包了。</p><p><img src="/images/http/image.png" alt="Alt text"></p><h2 id="HTTP请求格式"><a href="#HTTP请求格式" class="headerlink" title="HTTP请求格式"></a>HTTP请求格式</h2><p>HTTP请求包包含三个部分：请求行、请求头、请求体</p><h3 id="HTTP请求行"><a href="#HTTP请求行" class="headerlink" title="HTTP请求行"></a>HTTP请求行</h3><ul><li>请求行的内容<ul><li>方法类型</li><li>资源路径+查询参数</li><li>协议版本</li></ul></li></ul><p>直观地分析一个请求行<br><code>GET https://somewebsite.com/index.php?id=1 HTTP/1.1</code></p><ul><li>GET 是请求方式中的一种</li><li><code>https://somewebsite.com/index.php?id=1</code> 是URL，既资源路径+查询参数</li><li>HTTP&#x2F;1.1 协议版本</li></ul><blockquote><p><strong>请求方式</strong><br>只要有GET和POST两种方式，两者最直观的区别在于<strong>数据参数的位置</strong></p><ul><li>GET<br>数据参数往往直接写在URL的尾部，比如访问<code>https://somewebsite.com/index.php?usr=1&amp;pwd=1</code>时,就向目标网站传递了参数usr&#x3D;1和pwd&#x3D;1。</li><li>POST<br>数据参数往往写在请求体中<br>GET和POST的使用用途也往往不同，GET往往用来申请访问相关网页资源，POST往往用于向指定资源提交数据进行处理请求（例如提交表单或者上传文件）</li></ul></blockquote><h3 id="HTTP请求头"><a href="#HTTP请求头" class="headerlink" title="HTTP请求头"></a>HTTP请求头</h3><p>有一些常见的字段</p><ul><li>Host: 主机域名</li><li>User-Agent: 客户端相关信息</li><li>Accept：客户端想要的响应数据类型</li><li>Content-Type： 客户端告诉服务器实际发送的数据类型</li><li>X-Forwarded-For： 表示 HTTP 请求端真实 IP</li><li>Cookie: 某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据</li><li>Referer: 用于告知服务器用户的来源页面</li></ul><h3 id="HTTP请求体"><a href="#HTTP请求体" class="headerlink" title="HTTP请求体"></a>HTTP请求体</h3><p>客户端传给服务器的其他任意数据，POST方法下表单数据在此处<br>（使用GET方法的HTTP请求往往没有请求体）</p><h2 id="HTTP响应包"><a href="#HTTP响应包" class="headerlink" title="HTTP响应包"></a>HTTP响应包</h2><p>和请求包类似，由三个部分组成：响应行，响应头，响应体</p><h3 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h3><p>由协议版本，状态码，状态消息组成，比如<br><code>HTTP/1.1 200 OK</code></p><ul><li><p>协议版本  HTTP&#x2F;版本号</p></li><li><p>状态码:   XXX</p><ul><li>1xx 表示【临时响应】并需要请求者继续执行操作的状态代码</li><li>2xx 表示【成功】处理了请求的状态代码</li><li>3xx 表示要完成请求，需要进一步操作。通常，这些状态代码用来【重定向】</li><li>4xx 表示客户端错误–处理发生错误，责任在客户端</li><li>5xx 表示【服务器】在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</li></ul><p>常见状态码</p><ul><li>200 客户端请求成功，即处理成功</li><li>302 只是所请求的资源已移动到由Location响应头给定的URL，浏览器会自动重新访问到这个页面</li><li>404 请求资源不存在，一般是URL输入有误，或者网站资源被删除了</li></ul></li><li><p>状态消息 描述状态码</p></li></ul><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>告知客户端的信息</p><ul><li>Date</li><li>Content-type</li></ul><h3 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h3><p>服务器给客户端的数据内容，如HTML文件等。</p><h2 id="发送自定义HTTP请求"><a href="#发送自定义HTTP请求" class="headerlink" title="发送自定义HTTP请求"></a>发送自定义HTTP请求</h2><p>我们可以通过一些工具来发送自定义的HTTP请求</p><p>有些网站有配置防止爬虫爬取的技术，所以发送HTTP请求最好要设置HTTP请求头中的User-Agent等字段，让我们发送的请求“看上去”像是浏览器发送的。</p><h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><p>Windows和Linux命令行下都能用，是访问URL的计算机逻辑语言的工具。</p><ul><li>向目标网址发送请求</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com </span><br></pre></td></tr></table></figure><ul><li>用指定方式发送请求</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -X GET</span><br><span class="line">curl http://target.com -X POST -d <span class="string">&quot;id=1&quot;</span></span><br></pre></td></tr></table></figure><p>当使用参数 -d，-X POST 可以省略，因为会隐式发起 POST 请求。</p><ul><li>设置HTTP请求头</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -H <span class="string">&quot;User-Agent:MyBrowser&quot;</span></span><br></pre></td></tr></table></figure><ul><li>设置表单数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -F <span class="string">&quot;username=admin&quot;</span> -F <span class="string">&quot;password=123456&quot;</span></span><br><span class="line">curl http://target.com -F <span class="string">&quot;file=@/path/to/file&quot;</span></span><br></pre></td></tr></table></figure><ul><li>设置cookie</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://target.com -b <span class="string">&quot;character=admin&quot;</span></span><br></pre></td></tr></table></figure><h3 id="HackBar浏览器插件"><a href="#HackBar浏览器插件" class="headerlink" title="HackBar浏览器插件"></a>HackBar浏览器插件</h3><p>下载名为HackBar的浏览器插件后，可以按F12在开发者工具中打开<br><img src="/images/http/image-1.png" alt="Alt text"><br>图形化界面使得自定义http请求很容易，最后点左上角EXECUTE发送</p><h3 id="Python的requests库"><a href="#Python的requests库" class="headerlink" title="Python的requests库"></a>Python的requests库</h3><p>可以写Python脚本来实现http数据包的发送</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">URL = <span class="string">&#x27;http://target.com&#x27;</span></span><br><span class="line"><span class="comment"># 参数、表单、文件头、cookie都以字典的形式作为函数参数</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;12345&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;MyBrowser&#x27;</span></span><br><span class="line">    <span class="comment"># &#x27;Cookie&#x27;: &#x27;character=admin&#x27; #cookie可以在这里自定义</span></span><br><span class="line">&#125;</span><br><span class="line">cookie = &#123;</span><br><span class="line">    <span class="string">&#x27;character&#x27;</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># requests.get、requests.post方法分别用GET方法和POST方法发送http请求,返回response类</span></span><br><span class="line">response1 = requests.get(URL, params=param, headers=header, cookies=cookie)</span><br><span class="line">repsonse2 = requests.post(URL, data=data, headers=header,cookies=cookie)</span><br><span class="line"></span><br><span class="line"><span class="comment"># response类的常用属性有response.status_code（网站返回的状态码）,response.text（网站返回的响应体)</span></span><br><span class="line"><span class="built_in">print</span>(response1.text)</span><br><span class="line"><span class="built_in">print</span>(response2.text)</span><br></pre></td></tr></table></figure><h3 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h3><p>Burp Suite是一款强大的网络渗透工具，可以通过代理http请求包，修改相关字段，实现自定义数据包，可以自行搜索相关教程</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>现在有了上述基础知识，可以来点例题练练手</p><h3 id="攻防世界-Web-get-post"><a href="#攻防世界-Web-get-post" class="headerlink" title="攻防世界 Web get_post"></a>攻防世界 Web get_post</h3><p><img src="/images/http/image-2.png" alt="Alt text"></p><p>要求1： 请用GET方式提交一个名为a,值为1的变量<br>要求2： 请再以POST方式随便提交一个名为b,值为2的变量</p><p>用HackBar插件可以轻松秒杀<br><img src="/images/http/image-6.png" alt="Alt text"><br>EXECUTE后可得到flag</p><h3 id="攻防世界-Web-cookie"><a href="#攻防世界-Web-cookie" class="headerlink" title="攻防世界 Web cookie"></a>攻防世界 Web cookie</h3><p>题目描述：你知道什么是cookie吗？</p><p>打开开发者工具，查看cookie<br><img src="/images/http/image-4.png" alt="Alt text"><br>访问目录下的cookie.php试试<br>出现提示See the http response<br><img src="/images/http/image-5.png" alt="Alt text"><br>发现flag</p><h3 id="2023MoeCTF-Web-http"><a href="#2023MoeCTF-Web-http" class="headerlink" title="2023MoeCTF Web http"></a>2023MoeCTF Web http</h3><p>题目描述：用GET方法，完成五个任务</p><ol><li>use parameter: UwU&#x3D;u</li><li>post <strong>form</strong>: Luv&#x3D;u</li><li>use admin character</li><li>request from 127.0.0.1</li><li>use browser ‘MoeBrowser’</li></ol><p>关于这题我有写一篇详细的writeup<a href="#">我的writeup</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/16/hello-world/"/>
      <url>/2023/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="/images/config.png" alt="1"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
